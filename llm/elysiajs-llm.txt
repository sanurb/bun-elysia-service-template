========================
CODE SNIPPETS
========================
TITLE: Install Bun (Windows)
DESCRIPTION: Installs the Bun JavaScript runtime on Windows systems using PowerShell.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_1

LANGUAGE: powershell
CODE:
```
irm bun.sh/install.ps1 | iex
```

----------------------------------------

TITLE: Install Elysia with JavaScript (Bun)
DESCRIPTION: Installs Elysia and the Node.js adapter using Bun package manager for JavaScript projects.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_17

LANGUAGE: bash
CODE:
```
bun add elysia @elysiajs/node
```

----------------------------------------

TITLE: Hello World Example - ElysiaJS
DESCRIPTION: Demonstrates a basic 'Hello World' server setup using Elysia. It initializes an Elysia instance and defines a GET route for the root path that returns 'Hello World', then starts the server on port 3000.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/', () => 'Hello World')
    .listen(3000)
```

----------------------------------------

TITLE: Install Elysia for Web Standards
DESCRIPTION: Installs Elysia for use with runtimes that support Web Standard Request/Response, such as Cloudflare Workers or Deno.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_23

LANGUAGE: bash
CODE:
```
bun install elysia
```

LANGUAGE: bash
CODE:
```
pnpm install elysia
```

LANGUAGE: bash
CODE:
```
npm install elysia
```

LANGUAGE: bash
CODE:
```
yarn add elysia
```

----------------------------------------

TITLE: Install Node.js
DESCRIPTION: Provides commands for installing Node.js on various operating systems including macOS, Windows, Debian/Ubuntu, and Arch Linux.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_8

LANGUAGE: bash
CODE:
```
# MacOS
brew install node

# Windows
choco install nodejs

# apt (Linux)
sudo apt install nodejs

# pacman (Arch)
pacman -S nodejs npm
```

----------------------------------------

TITLE: Install Elysia with JavaScript (yarn)
DESCRIPTION: Installs Elysia and the Node.js adapter using yarn package manager for JavaScript projects.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_20

LANGUAGE: bash
CODE:
```
yarn add elysia @elysiajs/node
```

----------------------------------------

TITLE: Install Elysia with JavaScript (npm)
DESCRIPTION: Installs Elysia and the Node.js adapter using npm package manager for JavaScript projects.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_19

LANGUAGE: bash
CODE:
```
npm install elysia @elysiajs/node
```

----------------------------------------

TITLE: Install Bun (MacOS/Linux)
DESCRIPTION: Installs the Bun JavaScript runtime on macOS or Linux systems using a curl command.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl -fsSL https://bun.sh/install | bash
```

----------------------------------------

TITLE: Create and Setup Elysia Project
DESCRIPTION: Steps to create a new Elysia project using 'bun create', navigate into the project directory, and install dependencies.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_2

LANGUAGE: bash
CODE:
```
# Create a new project
bun create elysia hi-elysia

# cd into the project
cd hi-elysia

# Install dependencies
bun install
```

----------------------------------------

TITLE: Install Elysia with JavaScript (pnpm)
DESCRIPTION: Installs Elysia and the Node.js adapter using pnpm package manager for JavaScript projects.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_18

LANGUAGE: bash
CODE:
```
pnpm add elysia @elysiajs/node
```

----------------------------------------

TITLE: Install Elysia with TypeScript (Bun)
DESCRIPTION: Installs Elysia, the Node.js adapter, and development dependencies like tsx and TypeScript using Bun package manager.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_9

LANGUAGE: bash
CODE:
```
bun add elysia @elysiajs/node && \
bun add -d tsx @types/node typescript
```

----------------------------------------

TITLE: Install Elysia with TypeScript (npm)
DESCRIPTION: Installs Elysia, the Node.js adapter, and development dependencies like tsx and TypeScript using npm package manager.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_11

LANGUAGE: bash
CODE:
```
npm install elysia @elysiajs/node && \
npm install --save-dev tsx @types/node typescript
```

----------------------------------------

TITLE: Basic Elysia Application
DESCRIPTION: A minimal Elysia.js application that listens on port 3000 and responds with 'Hello Elysia' to root GET requests.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_5

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
	.get('/', () => 'Hello Elysia')
	.listen(3000)

console.log(
	`🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`
)
```

----------------------------------------

TITLE: Install Elysia with TypeScript (yarn)
DESCRIPTION: Installs Elysia, the Node.js adapter, and development dependencies like tsx and TypeScript using yarn package manager.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_12

LANGUAGE: bash
CODE:
```
yarn add elysia @elysiajs/node && \
yarn add -D tsx @types/node typescript
```

----------------------------------------

TITLE: Install Elysia with TypeScript (pnpm)
DESCRIPTION: Installs Elysia, the Node.js adapter, and development dependencies like tsx and TypeScript using pnpm package manager.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_10

LANGUAGE: bash
CODE:
```
pnpm add elysia @elysiajs/node && \
pnpm add -D tsx @types/node typescript
```

----------------------------------------

TITLE: Manually Add Elysia and Bun Types
DESCRIPTION: Installs Elysia and the necessary type definitions for Bun into an existing project using the Bun package manager.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_4

LANGUAGE: bash
CODE:
```
bun add elysia
bun add -d @types/bun
```

----------------------------------------

TITLE: Elysia Project Scripts
DESCRIPTION: Defines essential npm/bun scripts for an Elysia project, including development, building, and starting the server.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_6

LANGUAGE: json
CODE:
```
{
   	"scripts": {
  		"dev": "bun --watch src/index.ts",
  		"build": "bun build src/index.ts --target bun --outdir ./dist",
  		"start": "NODE_ENV=production bun dist/index.js",
  		"test": "bun test"
   	}
}
```

----------------------------------------

TITLE: Elysia API setup in api.ts
DESCRIPTION: Create an `api.ts` file in the project root to define your Elysia application. This example sets up a simple '/hello' GET endpoint that returns a JSON message.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/nuxt.md#_snippet_2

LANGUAGE: typescript
CODE:
```
export default () => new Elysia()
  .get('/hello', () => ({ message: 'Hello world!' }))
```

----------------------------------------

TITLE: Create Elysia Project
DESCRIPTION: Bootstraps a new Elysia.js project with the specified directory name using the Bun package manager.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_2

LANGUAGE: bash
CODE:
```
bun create elysia app
cd app
```

----------------------------------------

TITLE: Install Bun on Windows
DESCRIPTION: Installs the Bun runtime on Windows systems using a PowerShell command.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_1

LANGUAGE: bash
CODE:
```
powershell -c "irm bun.sh/install.ps1 | iex"
```

----------------------------------------

TITLE: Start Elysia Development Server
DESCRIPTION: Starts the Elysia development server, enabling hot-reloading for automatic updates on file changes.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_3

LANGUAGE: bash
CODE:
```
bun dev
```

----------------------------------------

TITLE: Backend Path Alias Configuration (tsconfig.json)
DESCRIPTION: Example `tsconfig.json` configuration for a backend project using a root-level path alias '@/*' pointing to './src/'. This setup is common but requires careful alignment in monorepos.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_7

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
  	"baseUrl": ".",
	"paths": {
	  "@/*": ["./src/*"]
	}
  }
}
```

----------------------------------------

TITLE: Define Basic GET Routes
DESCRIPTION: Demonstrates how to define simple GET routes for specific paths and start the Elysia server. It shows handling different paths with string or function responses.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/route.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/', 'hello')
    .get('/hi', 'hi')
    .listen(3000)
```

LANGUAGE: typescript
CODE:
```
const demo1 = new Elysia()
    .get('/', () => 'hello')
    .get('/hi', () => 'hi')
```

----------------------------------------

TITLE: ElysiaJS Basic Routing Example (TypeScript)
DESCRIPTION: Demonstrates setting up a basic ElysiaJS server with GET and POST routes. It shows how to handle root paths, dynamic route parameters, and request bodies. This snippet is optimized for Bun and leverages TypeScript for type safety.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/at-glance.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/', 'Hello Elysia')
    .get('/user/:id', ({ params: { id } }) => id)
    .post('/form', ({ body }) => body)
    .listen(3000)
```

----------------------------------------

TITLE: Elysia App Setup with Post Module
DESCRIPTION: Sets up the main Elysia application by importing and using the `post` module. This snippet demonstrates how to integrate custom route groups into the main application instance and start the server.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-supabase.md#_snippet_16

LANGUAGE: ts
CODE:
```
import { Elysia, t } from 'elysia'

import { auth, post } from './modules'

const app = new Elysia()
    .use(auth)
    .use(post)
    .listen(3000)

console.log(
    `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`
)
```

----------------------------------------

TITLE: Install Bun on MacOS/Linux
DESCRIPTION: Installs the Bun runtime on macOS and Linux systems using a curl command.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl -fsSL https://bun.sh/install | bash
```

----------------------------------------

TITLE: Basic Elysia App with JavaScript
DESCRIPTION: Creates a simple Elysia server using JavaScript that listens on port 3000 and responds with 'Hello Elysia' to root requests. Requires the Node.js adapter.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_21

LANGUAGE: javascript
CODE:
```
import { Elysia } from 'elysia'
import { node } from '@elysiajs/node'

const app = new Elysia({ adapter: node() })
	.get('/', () => 'Hello Elysia')
	.listen(3000, ({ hostname, port }) => {
		console.log(
			`🦊 Elysia is running at ${hostname}:${port}`
		)
	})
```

----------------------------------------

TITLE: Elysia Project Scripts (JavaScript)
DESCRIPTION: Defines development and start scripts for an Elysia project using plain JavaScript. The 'dev' script runs the file directly, and 'start' runs it in production mode.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_22

LANGUAGE: json
CODE:
```
{
	"type": "module",
   	"scripts": {
  		"dev": "node src/index.ts",
  		"start": "NODE_ENV=production node src/index.js"
   	}
}
```

----------------------------------------

TITLE: Install Swagger Plugin
DESCRIPTION: Installs the necessary plugin for generating OpenAPI schemas and Swagger UI integration.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_7

LANGUAGE: bash
CODE:
```
bun add @elysiajs/swagger
```

----------------------------------------

TITLE: Basic Elysia App with TypeScript
DESCRIPTION: Creates a simple Elysia server that listens on port 3000 and responds with 'Hello Elysia' to root requests. Requires the Node.js adapter.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_13

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { node } from '@elysiajs/node'

const app = new Elysia({ adapter: node() })
	.get('/', () => 'Hello Elysia')
	.listen(3000, ({ hostname, port }) => {
		console.log(
			`🦊 Elysia is running at ${hostname}:${port}`
		)
	})
```

----------------------------------------

TITLE: Install Bun Type Definitions
DESCRIPTION: Installs the type definitions for Bun. This is necessary when your Elysia handlers return Bun-specific types, such as `Bun.file`, to ensure proper type checking on the client-side.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_6

LANGUAGE: bash
CODE:
```
bun add -d @types/bun
```

----------------------------------------

TITLE: Basic Better Auth Setup
DESCRIPTION: Demonstrates the basic setup of the Better Auth framework, initializing it with a database connection. This is the foundational step before integrating with frameworks like Elysia.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/better-auth.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { betterAuth } from 'better-auth'
import { Pool } from 'pg'

export const auth = betterAuth({
    database: new Pool()
})
```

----------------------------------------

TITLE: Start Elysia Development Server
DESCRIPTION: Command to start the Elysia development server using 'bun dev'. The server automatically reloads on file changes.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_3

LANGUAGE: bash
CODE:
```
bun dev
```

----------------------------------------

TITLE: Hono Routing Example
DESCRIPTION: Demonstrates defining GET and POST routes in Hono, including path parameters and returning text responses. Shows how Hono uses `c.text()` for responses and requires explicit status setting.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { Hono } from 'hono'

const app = new Hono()

app.get('/', (c) => {
    return c.text('Hello World')
})

app.post('/id/:id', (c) => {
	c.status(201)
    return c.text(req.params.id)
})

export default app
```

----------------------------------------

TITLE: Install Eden with Bun
DESCRIPTION: Installs the necessary Elysia and Eden packages using the Bun package manager. Eden requires Elysia to infer utility types correctly.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/eden
bun add -d elysia
```

----------------------------------------

TITLE: Elysia Routing Example
DESCRIPTION: Demonstrates defining GET and POST routes in Elysia, including path parameters and returning responses directly. Shows Elysia's method chaining and automatic response mapping, including status setting within the handler.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
    .get('/', 'Hello World')
    .post(
    	'/id/:id',
     	({ status, params: { id } }) => {
      		return status(201, id)
      	}
    )
    .listen(3000)
```

----------------------------------------

TITLE: Elysia OpenTelemetry Basic Setup
DESCRIPTION: Applies the OpenTelemetry plugin to an Elysia instance for automatic tracing. This setup requires installing `@elysiajs/opentelemetry` and configuring OpenTelemetry SDK components like `BatchSpanProcessor` and `OTLPTraceExporter`.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-11.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { opentelemetry } from '@elysiajs/opentelemetry'

import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto'

new Elysia()
	.use(
		opentelemetry({
			spanProcessors: [
				new BatchSpanProcessor(
					new OTLPTraceExporter()
				)
			]
		})
	)

```

----------------------------------------

TITLE: Production Dependencies in package.json
DESCRIPTION: Example package.json configuration showing how to list production dependencies, including ElysiaJS, OpenTelemetry instrumentation, and related types. This is crucial for using `bun install --production` on a server.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/opentelemetry.md#_snippet_6

LANGUAGE: json
CODE:
```
{
	"dependencies": {
		"pg": "^8.15.6"
	},
	"devDependencies": {
		"@elysiajs/opentelemetry": "^1.2.0",
		"@opentelemetry/instrumentation-pg": "^0.52.0",
		"@types/pg": "^8.11.14",
		"elysia": "^1.2.25"
	}
}
```

----------------------------------------

TITLE: Install Static Plugin
DESCRIPTION: Installs the ElysiaJS static plugin using the Bun package manager.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/static.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/static
```

----------------------------------------

TITLE: Example tRPC Server Setup
DESCRIPTION: A basic tRPC server implementation using `@trpc/server` and `zod`. It defines a simple router with a 'mirror' procedure that echoes input strings.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/integrate-trpc-with-elysia.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { initTRPC } from '@trpc/server'
import { observable } from '@trpc/server/observable'

import { z } from 'zod'

const t = initTRPC.create()

export const router = t.router({
    mirror: t.procedure.input(z.string()).query(({ input }) => input),
})

export type Router = typeof router

```

----------------------------------------

TITLE: Install Elysia Swagger Plugin
DESCRIPTION: Installs the `@elysiajs/swagger` package, which is essential for generating OpenAPI documentation within your Elysia application.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_11

LANGUAGE: bash
CODE:
```
bun add @elysiajs/swagger
```

----------------------------------------

TITLE: Elysia Server in Next.js App Router
DESCRIPTION: Demonstrates setting up an Elysia server within a Next.js App Router's `api/[[...slugs]]/route.ts` file. It shows how to import or create an Elysia instance, define routes, and export the handler for GET and POST methods. The example includes a basic prefix setup.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/nextjs.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

const app = new Elysia({ prefix: '/api' })
    .get('/', () => 'hello Next')
    .post('/', ({ body }) => body, {
        body: t.Object({
            name: t.String()
        })
    })

export const GET = app.handle
export const POST = app.handle
```

----------------------------------------

TITLE: Run Production Binary
DESCRIPTION: Executes the compiled server binary. This is the command used to start the production-ready application after it has been built.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_50

LANGUAGE: bash
CODE:
```
./server
```

----------------------------------------

TITLE: Install GraphQL Yoga Plugin
DESCRIPTION: Install the GraphQL Yoga plugin for ElysiaJS using bun.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/graphql-yoga.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/graphql-yoga
```

----------------------------------------

TITLE: Elysia Unit Test Example
DESCRIPTION: Provides an example of writing unit tests for an Elysia.js application using Bun's testing utilities. It demonstrates testing a simple GET request to ensure the application returns the expected response.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_12

LANGUAGE: typescript
CODE:
```
// test/index.test.ts
import { describe, expect, it } from 'bun:test'
import { Elysia } from 'elysia'

describe('Elysia', () => {
    it('return a response', async () => {
        const app = new Elysia().get('/', () => 'hi')

        const response = await app
            .handle(new Request('http://localhost/'))
            .then((res) => res.text())

        expect(response).toBe('hi')
    })
})
```

----------------------------------------

TITLE: Elysia.js Application Setup
DESCRIPTION: Sets up the main Elysia.js application, integrating essential plugins like Swagger for API documentation and OpenTelemetry for monitoring. It also includes basic error handling and mounts user and note modules.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_42

LANGUAGE: typescript
CODE:
```
import {
    Elysia
} from 'elysia'
import {
    swagger
} from '@elysiajs/swagger'
import {
    opentelemetry
} from '@elysiajs/opentelemetry'

import {
    note
} from './note'
import {
    user
} from './user'

const app = new Elysia()
    .use(opentelemetry())
    .use(swagger())
    .onError(({ error, code }) => {
        if (code === 'NOT_FOUND') return 'Not Found :('

        console.error(error)
    })
    .use(user)
    .use(note)
    .listen(3000)

```

----------------------------------------

TITLE: Elysia OpenAPI Documentation Setup
DESCRIPTION: Shows how to integrate OpenAPI (Swagger) documentation into an Elysia.js application using the '@elysiajs/swagger' plugin. This enables interactive API documentation accessible via a browser.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_11

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { swagger } from '@elysiajs/swagger'

const app = new Elysia()
    .use(swagger())
    .listen(3000)

console.log(`View documentation at "${app.server!.url}swagger" in your browser`);
```

----------------------------------------

TITLE: Elysia: Accessing app.fetch for Custom Runtimes
DESCRIPTION: This snippet shows how to access `app.fetch` in Elysia for custom runtime environments. It initializes an Elysia application, defines a basic route, starts the server, and exports the `app.fetch` method for manual request handling. It also logs the server's running address.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_24

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
	.get('/', () => 'Hello Elysia')
	.listen(3000)

export default app.fetch

console.log(
	`🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`
)
```

----------------------------------------

TITLE: Elysia OpenTelemetry Basic Setup
DESCRIPTION: Demonstrates how to install and apply the `@elysiajs/opentelemetry` plugin to an Elysia instance for basic OpenTelemetry integration. It includes necessary imports for span processing and exporting.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/opentelemetry.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import {
	Elysia
} from 'elysia'
import {
	opentelemetry
} from '@elysiajs/opentelemetry'

import {
	BatchSpanProcessor
} from '@opentelemetry/sdk-trace-node'
import {
	OTLPTraceExporter
} from '@opentelemetry/exporter-trace-otlp-proto'

new Elysia().use(
	opentelemetry({
		spanProcessors: [
			new BatchSpanProcessor(new OTLPTraceExporter())
		]
	})
)
```

----------------------------------------

TITLE: Install Elysia Swagger Plugin
DESCRIPTION: Installs the necessary plugin for Elysia to generate Swagger documentation. This is the first step to enable automatic API documentation.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/openapi.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/swagger
```

----------------------------------------

TITLE: Elysia OpenTelemetry Instrumentation Setup
DESCRIPTION: Demonstrates setting up OpenTelemetry instrumentation for specific libraries like PostgreSQL (`pg`) by creating a separate setup file and preloading it using `bunfig.toml`. This ensures the SDK is initialized before the instrumented module is imported.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/opentelemetry.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import {
	opentelemetry
} from '@elysiajs/opentelemetry'
import {
	PgInstrumentation
} from '@opentelemetry/instrumentation-pg'

export const instrumentation = opentelemetry({
	instrumentations: [
		new PgInstrumentation()
	]
})
```

----------------------------------------

TITLE: Elysia WebSocket Example
DESCRIPTION: Illustrates how to set up a real-time connection using Web Sockets with Elysia.js. This example defines a WebSocket endpoint '/ping' that echoes messages back to the client, prefixed with 'hello '.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .ws('/ping', {
        message(ws, message) {
            ws.send('hello ' + message)
        }
    })
    .listen(3000)
```

----------------------------------------

TITLE: Monorepo Dockerfile with Bun Build
DESCRIPTION: A Dockerfile example for building an ElysiaJS application within a monorepo structure using Turborepo. It caches dependencies, copies necessary package.json files, installs dependencies with Bun, and then builds the application, ensuring external packages are correctly handled.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/deploy.md#_snippet_9

LANGUAGE: dockerfile
CODE:
```
FROM oven/bun:1 AS build

WORKDIR /app

# Cache packages
COPY package.json package.json
COPY bun.lock bun.lock

COPY /apps/server/package.json ./apps/server/package.json
COPY /packages/config/package.json ./packages/config/package.json

RUN bun install

COPY /apps/server ./apps/server
COPY /packages/config ./packages/config

ENV NODE_ENV=production

RUN bun build \
	--compile \
	--minify-whitespace \
	--minify-syntax \
	--target bun \
	--outfile server \
	./src/index.ts

FROM gcr.io/distroless/base

WORKDIR /app

COPY --from=build /app/server server

ENV NODE_ENV=production

CMD ["./server"]

EXPOSE 3000
```

----------------------------------------

TITLE: Install Swagger Plugin
DESCRIPTION: Installs the Elysia Swagger plugin using bun. This is the first step to enable Swagger documentation generation for your Elysia server.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/swagger.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/swagger
```

----------------------------------------

TITLE: Elysia Project Scripts (TypeScript)
DESCRIPTION: Defines development, build, and start scripts for an Elysia project using TypeScript and tsx for development, and tsc for building.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_14

LANGUAGE: json
CODE:
```
{
   	"scripts": {
  		"dev": "tsx watch src/index.ts",
    	"build": "tsc src/index.ts --outDir dist",
  		"start": "NODE_ENV=production node dist/index.js"
   	}
}
```

----------------------------------------

TITLE: Install Elysia HTML Plugin
DESCRIPTION: Command to install the @elysiajs/html plugin using the Bun package manager.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/html.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/html
```

----------------------------------------

TITLE: Initialize tsconfig.json
DESCRIPTION: Initializes a tsconfig.json file for TypeScript projects, providing a default configuration.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_15

LANGUAGE: bash
CODE:
```
npx tsc --init
```

----------------------------------------

TITLE: Install Elysia Swagger Plugin
DESCRIPTION: Installs the `@elysiajs/swagger` plugin using `bun`, a package manager. This plugin is essential for automatically generating OpenAPI documentation for Elysia applications, enhancing developer experience.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-supabase.md#_snippet_17

LANGUAGE: bash
CODE:
```
bun add @elysiajs/swagger@rc
```

----------------------------------------

TITLE: Elysia GET with Conditional Response Status (TypeScript)
DESCRIPTION: Shows how to define a GET route with multiple possible response statuses and corresponding literals in Elysia. This example uses `status()` to return different HTTP codes and messages based on a condition.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/index.md#_snippet_2

LANGUAGE: typescript
CODE:
```
// @errors: 2345
import { Elysia, t } from 'elysia'

new Elysia()
	.get('/profile', ({ status }) => {
		if(Math.random() > .5)
			return status(418, 'Mika')

		return 'ok'
	}, {
		response: {
			200: t.Literal('ok'),
			418: t.Literal('Nagisa')
		}
	})
	.listen(3000)
```

----------------------------------------

TITLE: Elysia: Testing with Eden for Type Safety
DESCRIPTION: Utilizes the Eden helper library for end-to-end type-safe testing with auto-completion. This example shows how to fetch data from a simple GET endpoint.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_20

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'
import { treaty } from '@elysiajs/eden'
import { describe, expect, it } from 'bun:test'

const app = new Elysia().get('/hello', 'Hello World')
const api = treaty(app)

describe('GET /', () => {
	it('should return Hello World', async () => {
		const { data, error, status } = await api.hello.get()

		expect(status).toBe(200)
		expect(data).toBe('Hello World')
	})
})

```

----------------------------------------

TITLE: Install OpenTelemetry Plugin
DESCRIPTION: Command to add the OpenTelemetry plugin to an Elysia project using Bun package manager.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_38

LANGUAGE: bash
CODE:
```
bun add @elysiajs/opentelemetry
```

----------------------------------------

TITLE: Vue Component Setup
DESCRIPTION: Demonstrates the setup for a Vue.js blog post component, importing necessary layout components and defining props for blog post metadata.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-10.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup>
    import Blog from '../components/blog/Layout.vue'
</script>

<Blog
    title="Elysia 1.0 - Lament of the Fallen"
    src="/blog/elysia-10/lament-of-the-fallen.webp"
    alt="Dreamy Euphony landscape of floating bubble"
    author="saltyaom"
    date="16 Mar 2024"
    shadow
>

Elysia 1.0 is the first stable release after development for 1.8 years.

Since started, we have always waiting for a framework that focuses on developer experience, velocity, and how to make writing code for humans, not a machine.

We battle-test Elysia in various situations, simulate medium and large-scale projects, shipping code to clients and this is the first version that we felt confident enough to ship.

Elysia 1.0 introduces significant improvements and contains 1 necessary breaking change.
- [Sucrose](#sucrose) - Rewritten pattern matching static analysis instead of RegEx
- [Improved startup time](#improved-startup-time) up to 14x
- [Remove ~40 routes/instance TypeScript limitation](#remove-40-routesinstance-limit)
- [Faster type inference](#type-inference-improvement) up to ~3.8x
- [Treaty 2](#treaty-2)
- [Hook type](#hook-type-breaking-change) (breaking changes)
- [Inline error](#inline-error) for strict error check

---

It's a tradition that Elysia's release note have a version named after a song or media.

This important version is named after ["Lament of the Fallen"](https://youtu.be/v1sd5CzR504).

Animated short from **"Honkai Impact 3rd"** from my favorite arc, and my favorite character, **"Raiden Mei"** featuring her theme song, ["Honkai World Diva"](https://youtu.be/s_ZLfaZMpe0).

It's a very good game, and you should check it out.

ー SaltyAom

<small>Also known as Raiden Mei from Gun Girl Z, Honkai Impact 3rd, Honkai Star Rail. And her "variation", Raiden Shogun from Genshin Impact, and possibly Acheron from Honkai Star Rail (since she's likely a bad-end herrscher form mentioned in Star Rail 2.1).</small>

::: tip
Remember, ElysiaJS is an open source library maintain by volunteers, and isn't associate with Mihoyo nor Hoyoverse. But we are a huge fan of Honkai series, alright?
:::

```

----------------------------------------

TITLE: Install Prisma CLI
DESCRIPTION: Installs the Prisma CLI as a development dependency in your project. Prisma CLI is essential for managing database schema, migrations, and generating the Prisma Client.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_1

LANGUAGE: typescript
CODE:
```
bun add -d prisma
```

----------------------------------------

TITLE: Backend Module Import with Path Alias
DESCRIPTION: Demonstrates how to import modules within the backend application using the configured path alias '@/*'. This example shows importing controllers 'a' and 'b' into an Elysia app.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { a, b } from '@/controllers'

const app = new Elysia()
	.use(a)
	.use(b)
	.listen(3000)

export type app = typeof app
```

----------------------------------------

TITLE: Install Prisma and Prismabox with Bun
DESCRIPTION: Installs the necessary Prisma client and Prismabox for database integration, along with Prisma as a development dependency. This command ensures you have the tools required to set up Prisma schema and generate Elysia validation models.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/prisma.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @prisma/client prismabox && \
bun add -d prisma
```

----------------------------------------

TITLE: Custom HTTP Methods - ElysiaJS
DESCRIPTION: Shows how to define routes using custom HTTP methods or verbs beyond standard GET, POST, PUT, DELETE. It illustrates registering a route for 'M-SEARCH' alongside common methods.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/hi', () => 'Hi')
    .post('/hi', () => 'From Post')
    .put('/hi', () => 'From Put')
    .route('M-SEARCH', '/hi', () => 'Custom Method')
    .listen(3000)
```

----------------------------------------

TITLE: Express: OpenAPI Setup with Swagger UI
DESCRIPTION: Demonstrates setting up OpenAPI documentation for an Express application using the swagger-ui-express package. It requires manual configuration of the OpenAPI specification object.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-express.md#_snippet_17

LANGUAGE: TypeScript
CODE:
```
import express from 'express'

import swaggerUi from 'swagger-ui-express'

const app = express()
app.use(express.json())

app.post('/users', (req, res) => {
	// TODO: validate request body
	res.status(201).json(req.body)
})

const swaggerSpec = {
	openapi: '3.0.0',
	info: {
		title: 'My API',
		version: '1.0.0'
	},
	paths: {
		'/users': {
			post: {
				summary: 'Create user',
				requestBody: {
					content: {
						'application/json': {
							schema: {
								type: 'object',
								properties: {
									name: {
										type: 'string',
										description: 'First name only'
									},
									age: { type: 'integer' }
								},
								required: ['name', 'age']
							}
						}
					}
				},
				responses: {
					'201': {
						description: 'User created'
					}
				}
			}
		}
	}
}

app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec))
```

----------------------------------------

TITLE: Nested Mount Example
DESCRIPTION: Illustrates deep nesting of frameworks using the `.mount` method. This example shows an Elysia app mounted within a Hono app, which is then mounted into a main Elysia application, showcasing complex inter-framework routing.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/mount.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'
import { Hono } from 'hono'

const elysia = new Elysia()
    .get('/', () => 'Hello from Elysia inside Hono inside Elysia')

const hono = new Hono()
    .get('/', (c) => c.text('Hello from Hono!'))
    .mount('/elysia', elysia.fetch)

const main = new Elysia()
    .get('/', () => 'Hello from Elysia')
    .mount('/hono', hono.fetch)
    .listen(3000)
```

----------------------------------------

TITLE: ElysiaJS Basic Validation Example
DESCRIPTION: Demonstrates a basic ElysiaJS route with parameter validation using TypeBox. It defines a GET request that expects a numeric 'id' parameter and returns it.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
    .get('/id/:id', ({ params: { id } }) => id, {
        params: t.Object({
            id: t.Number()
        })
    })
    .listen(3000)
```

----------------------------------------

TITLE: Define a Basic GET Route
DESCRIPTION: Adds a GET route to the Elysia application that returns a simple string response.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
    .get('/', () => 'Hello Elysia')
    .get('/hello', 'Do you miss me?') // [!code ++]
    .listen(3000)
```

----------------------------------------

TITLE: Basic Elysia Server
DESCRIPTION: Demonstrates setting up a basic Elysia server with simple GET routes for text, JSON, and dynamic parameters. It listens on port 3000.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/midori.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/', 'Hello World')
    .get('/json', {
        hello: 'world'
    })
    .get('/id/:id', ({ params: { id } }) => id)
    .listen(3000)

```

----------------------------------------

TITLE: Module Import with Scoped Path Alias
DESCRIPTION: Example of importing modules using scoped path aliases, such as '@backend/controllers', after configuring them in `tsconfig.json`. This method enhances clarity and prevents alias collisions in monorepos.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_13

LANGUAGE: typescript
CODE:
```
// Should work in both frontend and backend and not return `any`
import { a, b } from '@backend/controllers'
```

----------------------------------------

TITLE: Vue Component Setup
DESCRIPTION: This snippet demonstrates the setup of a Vue.js component, importing a 'Blog' layout component. It's used to structure the blog post content.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-11.md#_snippet_0

LANGUAGE: Vue
CODE:
```
<script setup>
    import Blog from '../components/blog/Layout.vue'
</script>
```

----------------------------------------

TITLE: Elysia Server as Expo API Route
DESCRIPTION: Demonstrates setting up a basic Elysia server and exporting its handler for use as an Expo API route. This example shows how to define GET and POST methods and export the `app.handle` function.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/expo.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// app/[...slugs]+api.ts
import { Elysia, t } from 'elysia'

const app = new Elysia()
    .get('/', () => 'hello Next')
    .post('/', ({ body }) => body, {
        body: t.Object({
            name: t.String()
        })
    })

export const GET = app.handle // [!code ++]
export const POST = app.handle // [!code ++]
```

----------------------------------------

TITLE: Install Cron Plugin with Bun
DESCRIPTION: Demonstrates how to install the ElysiaJS Cron plugin using the Bun package manager.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/cron.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/cron
```

----------------------------------------

TITLE: Elysia Plugin Example
DESCRIPTION: Demonstrates how to create and use a plugin in Elysia.js. A plugin allows for modularity and state sharing between different parts of an application. This example shows a plugin that adds a state value and a route, which is then used by the main Elysia instance.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const plugin = new Elysia()
    .state('plugin-version', 1)
    .get('/hi', () => 'hi')

new Elysia()
    .use(plugin)
    .get('/version', ({ store }) => store['plugin-version'])
    .listen(3000)
```

----------------------------------------

TITLE: Install Stream Plugin with Bun
DESCRIPTION: Shows how to install the Elysia Stream plugin using the Bun package manager. This is the first step to integrate streaming capabilities into your Elysia application.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/stream.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/stream
```

----------------------------------------

TITLE: Run PostgreSQL with Docker
DESCRIPTION: Starts a PostgreSQL database instance using Docker. This command maps the default PostgreSQL port (5432) and sets a root password for the database.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_4

LANGUAGE: bash
CODE:
```
docker run -p 5432:5432 -e POSTGRES_PASSWORD=12345678 -d postgres
```

----------------------------------------

TITLE: Install Server Timing Plugin with Bun
DESCRIPTION: Installs the Server Timing plugin for Elysia using the Bun package manager. This is the first step to integrate performance auditing into your Elysia application.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/server-timing.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/server-timing
```

----------------------------------------

TITLE: Run Compiled Binary
DESCRIPTION: Executes the compiled ElysiaJS binary. Once compiled, the server can be run directly without requiring the Bun runtime to be installed on the deployment machine, enhancing portability.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/deploy.md#_snippet_1

LANGUAGE: bash
CODE:
```
./server
```

----------------------------------------

TITLE: Elysia App Setup with Authorization
DESCRIPTION: This snippet demonstrates setting up an ElysiaJS application with authorization. It imports user services, decorates the app with the Note instance, defines models, and applies middleware like `userService` and `getUserId` to inject user context into routes.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_33

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'
import { getUserId, userService } from './user'

const memo = t.Object({
    data: t.String(),
    author: t.String()
})

type Memo = typeof memo.static

class Note {
    constructor(
        public data: Memo[] = [
            {
                data: 'Moonhalo',
                author: 'saltyaom'
            }
        ]
    ) {}

    add(note: Memo) {
        this.data.push(note)

        return this.data
    }

    remove(index: number) {
        return this.data.splice(index, 1)
    }

    update(index: number, note: Partial<Memo>) {
        return (this.data[index] = { ...this.data[index], ...note })
    }
}

export const note = new Elysia({
    prefix: '/note'
})
    .use(userService)
    .decorate('note', new Note())
    .model({
        memo: t.Omit(memo, ['author'])
    })
    .onTransform(function log({ body, params, path, request: { method } }) {
        console.log(`${method} ${path}`, {
            body,
            params
        })
    })
    .get('/', ({ note }) => note.data)
    .use(getUserId)
    .put(
        '/',
        ({ note, body: { data }, username }) =>
            note.add({ data, author: username }),
        {
            body: 'memo'
        }
    )
    .get(
        '/:index',
        ({ note, params: { index }, status }) => {
            return note.data[index] ?? status(404, 'Not Found :(')
        },
        {
            params: t.Object({
                index: t.Number()
            })
        }
    )
    .guard({
        params: t.Object({
            index: t.Number()
        })
    })
    .delete('/:index', ({ note, params: { index }, status }) => {
        if (index in note.data) return note.remove(index)

        return status(422)
    })
    .patch(
        '/:index',
        ({ note, params: { index }, body: { data }, status, username }) => {
        	if (index in note.data)
         		return note.update(index, { data, author: username })

            return status(422)
        },
        {
            body: 'memo'
        }
    )
```

----------------------------------------

TITLE: Install Elysia Eden Dependencies
DESCRIPTION: Installs the necessary packages for using Elysia's Eden client, which enables type-safe API requests from the client-side.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/integrate-trpc-with-elysia.md#_snippet_10

LANGUAGE: bash
CODE:
```
bun add @elysiajs/eden && bun add -d elysia
```

----------------------------------------

TITLE: Consume Elysia API with Eden Treaty
DESCRIPTION: Illustrates how to import the exported server type and use the treaty client to interact with the Elysia server. This example shows making a GET request and accessing the response data and potential errors in a type-safe manner.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/treaty/overview.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// @filename: server.ts
import {
    Elysia,
    t
} from 'elysia'

const app = new Elysia()
    .get('/hi', () => 'Hi Elysia')
    .get('/id/:id', ({ params: { id } }) => id)
    .post('/mirror', ({ body }) => body, {
        body: t.Object({
            id: t.Number(),
            name: t.String()
        })
    })
    .listen(3000)

export type App = typeof app // [!code ++]

// @filename: client.ts
// ---cut---
// client.ts
import { treaty } from '@elysiajs/eden'
import type { App } from './server' // [!code ++]

const app = treaty<App>('localhost:3000')

// response type: 'Hi Elysia'
const { data, error } = await app.hi.get()
      // ^?
```

----------------------------------------

TITLE: ElysiaJS Static Path Example
DESCRIPTION: Demonstrates a basic static path structure for a server resource lookup in ElysiaJS. It shows how a URL is parsed into a path, excluding query parameters and fragments.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/route.md#_snippet_7

LANGUAGE: bash
CODE:
```
http://localhost:/path/page
```

----------------------------------------

TITLE: Elysia: After Response Console Log Example
DESCRIPTION: Provides an example of the expected console output when using the `onAfterResponse` hook to log performance timestamps.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_34

LANGUAGE: bash
CODE:
```
Response 0.0000
Response 0.0001
Response 0.0002
```

----------------------------------------

TITLE: Create Elysia Project
DESCRIPTION: Initializes a new ElysiaJS project using the 'elysia-prisma' template. This command sets up the basic project structure and necessary files for an Elysia server.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun create elysia elysia-prisma
```

----------------------------------------

TITLE: Install Bearer Plugin
DESCRIPTION: Command to install the @elysiajs/bearer plugin using the bun package manager. This is the first step to integrate the plugin into your Elysia project.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/bearer.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/bearer
```

----------------------------------------

TITLE: ElysiaJS Component Setup
DESCRIPTION: This script setup block imports necessary components for rendering the table of contents in ElysiaJS documentation. It imports `Card` and `Deck` components from local paths, which are used to structure and display the learning resources.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/table-of-content.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup>
    import Card from './components/nearl/card.vue'
    import Deck from './components/nearl/card-deck.vue'
</script>
```

----------------------------------------

TITLE: Install Apollo GraphQL Plugin
DESCRIPTION: Installs the necessary packages for the Apollo GraphQL plugin for ElysiaJS. This includes the core Elysia Apollo integration, the GraphQL library, and the Apollo Server package.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/graphql-apollo.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add graphql @elysiajs/apollo @apollo/server
```

----------------------------------------

TITLE: Install JWT Plugin
DESCRIPTION: Installs the JWT plugin for ElysiaJS using the bun package manager. This is the initial step to integrate JWT functionality into your Elysia server.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/jwt.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/jwt
```

----------------------------------------

TITLE: Elysia Trace: Listener Example
DESCRIPTION: Provides a basic example of using a trace listener within Elysia. It shows how to define a listener for a specific lifecycle event, like 'onBeforeHandle', and access its parameters.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/trace.md#_snippet_3

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
	.trace(({ onBeforeHandle }) => {
		// This is trace listener
		// hover to view the type
		onBeforeHandle((parameter) => {

		})
	})
	.get('/', () => 'Hi')
	.listen(3000)
```

----------------------------------------

TITLE: OpenAPI Integration with Controllers
DESCRIPTION: Illustrates integrating multiple controllers and the Swagger plugin into an Elysia application. This setup generates OpenAPI documentation for the defined routes.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/midori.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Elysia App with OpenAPI:

This Elysia application integrates the Swagger plugin to provide OpenAPI documentation for its endpoints. It utilizes separate controllers for different functionalities.

Controllers:

1.  **Users Controller**:
    *   Endpoint: `/users`
    *   Method: GET
    *   Description: Returns a string.
    *   Example Response: "Dreamy Euphony"

2.  **Feed Controller**:
    *   Endpoint: `/feed`
    *   Method: GET
    *   Description: Returns an array of strings.
    *   Example Response: ["Hoshino", "Griseo", "Astro"]

Server Setup:

*   The main server uses `new Elysia().use(swagger()).use(users).use(feed).listen(3000)`.
*   The `swagger()` plugin automatically generates the OpenAPI specification based on the routes defined in the controllers.

Dependencies:

*   `elysia`
*   `@elysiajs/swagger`
```

----------------------------------------

TITLE: Install tRPC Plugin for ElysiaJS
DESCRIPTION: Installs the necessary packages for integrating tRPC with ElysiaJS. Requires Node.js/Bun environment.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/trpc.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/trpc @trpc/server @elysiajs/websocket
```

----------------------------------------

TITLE: Elysia GET with Params and Headers (TypeScript)
DESCRIPTION: Demonstrates defining GET routes with dynamic parameters and setting response headers in Elysia. It shows how to access route parameters and modify response headers using the `set` object.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/index.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// @noErrors
import { Elysia } from 'elysia'

new Elysia()
	.get('/id/:id', ({ params, set }) => {
	                   // ^?



		set.headers.a
		//           ^|

		return 'Su'
	})

	.get('/optional/:name?', ({ params: { name } }) => {
	                                   // ^?
        return name ?? 'Pardofelis'
	})
	.listen(3000)
```

----------------------------------------

TITLE: ElysiaJS API Endpoint Examples
DESCRIPTION: Provides examples of defining API endpoints with different validation strategies in ElysiaJS. Includes handling path parameters, query parameters, and demonstrating validation errors.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
ElysiaJS API Endpoint Definitions:

1.  **GET /query (with string query parameter)**
    -   **Guard Configuration:**
        -   `query`: `t.Object({ name: t.String() })`
    -   **Handler:** Returns the `name` query parameter.
    -   **Example Usage:** `/query?name=Elysia`

2.  **GET /id/:id (with numeric path parameter)**
    -   **Handler:** Returns the `id` path parameter.
    -   **Parameter Schema:** `params: t.Object({ id: t.Number() })`
    -   **Example Usage:** `/id/123`

3.  **GET /id/a (with validation error for path parameter)**
    -   **Scenario:** Attempts to access `/id/a` where `id` is expected to be numeric.
    -   **Error Thrown:** `ValidationError('params', t.Object({ id: t.Numeric() }), { id: 'a' })`

4.  **GET /query (with numeric query parameter, demonstrating type coercion/error)**
    -   **Guard Configuration:**
        -   `query`: `t.Object({ name: t.Number() })`
    -   **Route 1:** `/query?id=1` - Expects `id` to be numeric (coerced).
    -   **Route 2:** `/query?id=salt` - `id` is not numeric, triggering a validation error.

5.  **GET /query (with array query parameter)**
    -   **Guard Configuration:**
        -   `query`: `t.Object({ name: t.Array(t.String()), squad: t.String() })`
    -   **Route 1:** `/query?name=rapi,anis,neon&squad=counter` - Handles comma-separated array values.
    -   **Route 2:** `/query?name=rapi&name=anis&name=neon&squad=counter` - Handles multiple query parameters with the same name for array values.
    -   **Note:** The handler in the provided snippet attempts to access `id`, which is not defined in the schema, likely a typo in the original example.
```

----------------------------------------

TITLE: Configure tsconfig.json for Strict Mode
DESCRIPTION: Updates the tsconfig.json file to enable strict type checking by setting 'compilerOptions.strict' to true.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_16

LANGUAGE: json
CODE:
```
{
   	"compilerOptions": {
  		"strict": true
   	}
}
```

----------------------------------------

TITLE: Install and Use OpenTelemetry Plugin
DESCRIPTION: Installs the @elysiajs/opentelemetry plugin using bun and demonstrates its basic application to an Elysia instance. It shows how to configure custom span processors and trace exporters for sending telemetry data.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/opentelemetry.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { opentelemetry } from '@elysiajs/opentelemetry'

import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto'

new Elysia()
	.use(
		opentelemetry({
			spanProcessors: [
				new BatchSpanProcessor(
					new OTLPTraceExporter()
				)
			]
		})
	)

```

----------------------------------------

TITLE: Install nuxt-elysia plugin
DESCRIPTION: Install the necessary packages for integrating Elysia with Nuxt. This includes Elysia itself, Eden Treaty for communication, and the community 'nuxt-elysia' plugin.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/nuxt.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add elysia @elysiajs/eden
bun add -d nuxt-elysia
```

----------------------------------------

TITLE: Dockerfile for ElysiaJS Binary Deployment
DESCRIPTION: A Dockerfile example for deploying an ElysiaJS application using a compiled binary. It utilizes a multi-stage build, first compiling the application using Bun in a build stage, and then copying the resulting binary into a minimal Distroless base image for a smaller and more secure final image. It exposes port 3000 and sets the production environment.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/deploy.md#_snippet_6

LANGUAGE: dockerfile
CODE:
```
FROM oven/bun AS build

WORKDIR /app

# Cache packages installation
COPY package.json package.json
COPY bun.lock bun.lock

RUN bun install

COPY ./src ./src

ENV NODE_ENV=production

RUN bun build \
	--compile \
	--minify-whitespace \
	--minify-syntax \
	--target bun \
	--outfile server \
	./src/index.ts

FROM gcr.io/distroless/base

WORKDIR /app

COPY --from=build /app/server server

ENV NODE_ENV=production

CMD ["./server"]

EXPOSE 3000
```

----------------------------------------

TITLE: Install React Email with Bun
DESCRIPTION: Installs React Email and its necessary components for use with ElysiaJS. It adds the core library and the React/ReactDOM dependencies required for component rendering.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/react-email.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add -d react-email
bun add @react-email/components react react-dom
```

----------------------------------------

TITLE: Vue.js Setup for Elysia Blog
DESCRIPTION: This snippet shows the setup for a Vue.js component used within the Elysia blog. It imports the `Blog` layout component and passes props like title, image source, alt text, author, and date.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-03.md#_snippet_2

LANGUAGE: Vue.js
CODE:
```
<script setup>
    import Blog from '../components/blog/Layout.vue'
</script>

<Blog
    title="Elysia 0.3 - 大地の閾を探して [Looking for Edge of Ground]"
    src="/blog/elysia-03/edge-of-ground.webp"
    alt="shattered glass pieces floating in the abyss"
    author="saltyaom"
    date="17 Mar 2023"
>
    <!-- Blog content goes here -->
</Blog>
```

----------------------------------------

TITLE: Elysia App Setup with Swagger Plugin
DESCRIPTION: Demonstrates adding the `@elysiajs/swagger` plugin to an Elysia application. This automatically generates OpenAPI documentation, providing type-safe schema definitions and improving the developer experience for frontend teams.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-supabase.md#_snippet_18

LANGUAGE: ts
CODE:
```
import { Elysia, t } from 'elysia'
import { swagger } from '@elysiajs/swagger'

import { auth, post } from './modules'

const app = new Elysia()
    .use(swagger())
    .use(auth)
    .use(post)
    .listen(3000)

console.log(
    `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`
)
```

----------------------------------------

TITLE: Elysia GraphQL Yoga Integration
DESCRIPTION: Shows how to integrate a GraphQL server into Elysia.js using the '@elysiajs/graphql-yoga' plugin. This example sets up a basic GraphQL API with a 'hi' query.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_14

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { yoga } from '@elysiajs/graphql-yoga'

const app = new Elysia()
    .use(
        yoga({
            typeDefs: /* GraphQL */`
                type Query {
                    hi: String
                }
            `,
            resolvers: {
                Query: {
                    hi: () => 'Hello from Elysia'
                }
            }
        })
    )
    .listen(3000)
```

----------------------------------------

TITLE: Vue Setup for Elysia Blog Post
DESCRIPTION: This script setup block is used within a Vue.js blog component to import necessary modules. It imports the 'Blog' component, which is likely used to structure and render the blog post content.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-07.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup>
    import Blog from '../components/blog/Layout.vue'
</script>
```

----------------------------------------

TITLE: Install CORS Plugin with Bun
DESCRIPTION: Installs the ElysiaJS CORS plugin using the Bun package manager. This is the first step to enable CORS functionality in an Elysia application.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/cors.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add @elysiajs/cors
```

----------------------------------------

TITLE: Elysia.js Route Definitions
DESCRIPTION: Demonstrates defining GET routes for user sign-out and profile retrieval in an Elysia.js application, including cookie handling for session management.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_24

LANGUAGE: javascript
CODE:
```
app.get(
        '/sign-out',
        ({ cookie: { token } }) => {
            token.remove()
            return {
                success: true,
                message: 'Signed out'
            }
        },
        {
            cookie: 'optionalSession'
        }
    )
    .get(
        '/profile',
        ({ cookie: { token }, store: { session }, status }) => {
            const username = session[token.value]
            if (!username)
                return status(401, {
                    success: false,
                    message: 'Unauthorized'
                })
            return {
                success: true,
                username
            }
        },
        {
            cookie: 'session'
        }
    )
```

----------------------------------------

TITLE: OpenAPI Documentation: Fastify vs Elysia
DESCRIPTION: Compares OpenAPI documentation setup in Fastify with `@fastify/swagger` and Elysia with `@elysiajs/swagger`. Elysia defaults to Scalar UI and offers better type-safety for models.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_18

LANGUAGE: ts
CODE:
```
import fastify from 'fastify'
import swagger from '@fastify/swagger'

const app = fastify()
app.register(swagger, {
	openapi: '3.0.0',
	info: {
		title: 'My API',
		version: '1.0.0'
	}
})

app.addSchema({
	$id: 'user',
	type: 'object',
	properties: {
		name: {
			type: 'string',
			description: 'First name only'
		},
		age: { type: 'integer' }
	},
	required: ['name', 'age']
})

app.post(
	'/users',
	{
		schema: {
			summary: 'Create user',
			body: {
				$ref: 'user#'
			},
			response: {
				'201': {
					$ref: 'user#'
				}
			}
		}
	},
	(req, res) => {
		res.status(201).send(req.body)
	}
)

await fastify.ready()
fastify.swagger()
```

LANGUAGE: ts
CODE:
```
import { Elysia, t } from 'elysia'
import { swagger } from '@elysiajs/swagger'

const app = new Elysia()
	.use(swagger())
	.model({
		user: t.Object({
			name: t.String(),
			age: t.Number()
		})
	})
	.post('/users', ({ body }) => body, {
	//                  ^?
		body: 'user[]',
		response: {
			201: 'user[]'
		},
		detail: {
			summary: 'Create user'
		}
	})
```

----------------------------------------

TITLE: Install Elysia RC, Cookie Plugin, and Supabase JS Client
DESCRIPTION: Installs specific versions of Elysia (RC channel), the Elysia cookie plugin, and the Supabase JavaScript client. These packages are essential for building an Elysia application with Supabase integration and cookie management.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-supabase.md#_snippet_2

LANGUAGE: bash
CODE:
```
bun add elysia@rc @elysiajs/cookie@rc @supabase/supabase-js
```

----------------------------------------

TITLE: Run Jaeger All-in-One Docker Container
DESCRIPTION: Command to start a Jaeger all-in-one Docker container, which includes collectors and UI, for collecting and visualizing traces. This is necessary for the OpenTelemetry plugin to send data to.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_39

LANGUAGE: bash
CODE:
```
docker run --name jaeger \
  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \
  -e COLLECTOR_OTLP_ENABLED=true \
  -p 6831:6831/udp \
  -p 6832:6832/udp \
  -p 5778:5778 \
  -p 16686:16686 \
  -p 4317:4317 \
  -p 4318:4318 \
  -p 14250:14250 \
  -p 14268:14268 \
  -p 14269:14269 \
  -p 9411:9411 \
  jaegertracing/all-in-one:latest
```

----------------------------------------

TITLE: Elysia.js Trace Example with onStop Callback
DESCRIPTION: This example demonstrates how to use the `onBeforeHandle` and `onStop` callbacks within Elysia.js to capture lifecycle details. It shows how to access elapsed time and set custom headers based on this information.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/trace.md#_snippet_4

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
	.trace(({ onBeforeHandle, set }) => {
		onBeforeHandle(({ onStop }) => {
			onStop(({ elapsed }) => {
				set.headers['X-Elapsed'] = elapsed.toString()
			})
		})
	})
	.get('/', () => 'Hi')
	.listen(3000)
```

----------------------------------------

TITLE: Build Production Binary with Bun
DESCRIPTION: Compiles the TypeScript server entry file into a self-contained binary for production deployment. This command bundles the server, optimizes it, and creates an executable file.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_49

LANGUAGE: bash
CODE:
```
bun build \
	--compile \
	--minify-whitespace \
	--minify-syntax \
	--target bun \
	--outfile server \
	./src/index.ts
```

----------------------------------------

TITLE: Create Elysia Project with Bun
DESCRIPTION: Scaffolds a new Elysia project using the Bun runtime's create command. This command initializes a project directory with the necessary structure for an Elysia application.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-supabase.md#_snippet_1

LANGUAGE: bash
CODE:
```
bun create elysia elysia-supabase
```

----------------------------------------

TITLE: Basic Apollo GraphQL Server Setup in Elysia
DESCRIPTION: Demonstrates how to set up a basic Apollo GraphQL server within an Elysia application. It defines GraphQL schema types and resolvers, then integrates the Apollo plugin.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/graphql-apollo.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import {
	Elysia
} from 'elysia'
import {
	apollo,
	gql
} from '@elysiajs/apollo'

const app = new Elysia()
	.use(
		apollo({
			typeDefs: gql`
				type Book {
					title: String
					author: String
				}

				type Query {
					books: [Book]
				}
			`,
			resolvers: {
				Query: {
					books: () => {
						return [
							{
								title: 'Elysia',
								author: 'saltyAom'
							}
						]
					}
				}
			}
		})
	)
	.listen(3000)

// Accessing '/graphql' should show Apollo GraphQL playground.
```

----------------------------------------

TITLE: Bun Configuration for Preloading
DESCRIPTION: A TOML configuration file for Bun that specifies a file to be preloaded. This is used to load and initialize the OpenTelemetry setup before the main application code runs, ensuring proper instrumentation.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/opentelemetry.md#_snippet_4

LANGUAGE: toml
CODE:
```
preload = ["./src/instrumentation.ts"]
```

----------------------------------------

TITLE: Example Console Output for Elysia.js onAfterResponse Logging
DESCRIPTION: This snippet shows the expected console output when the `onAfterResponse` hook is used for logging, demonstrating multiple log entries for subsequent responses.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_38

LANGUAGE: bash
CODE:
```
Response 0.0000
Response 0.0001
Response 0.0002
```

----------------------------------------

TITLE: ElysiaJS Type Inference Example (TypeScript)
DESCRIPTION: Illustrates ElysiaJS's type inference capabilities, showing how route parameters are automatically typed. This example highlights the framework's goal of reducing explicit TypeScript declarations while maintaining type safety.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/at-glance.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/user/:id', ({ params: { id } }) => id)
                        // ^?
    .listen(3000)
```

----------------------------------------

TITLE: Database Migration
DESCRIPTION: Applies the database schema defined in schema.prisma to the actual database. The '--name init' flag names the migration 'init', and 'bunx prisma migrate dev' ensures the database is synced.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_6

LANGUAGE: bash
CODE:
```
bunx prisma migrate dev --name init
```

----------------------------------------

TITLE: Nested Framework Mounting
DESCRIPTION: Illustrates deep nesting of frameworks using the `.mount` method. This example shows an Elysia app mounted within a Hono app, which is then mounted into a main Elysia application, enabling complex multi-framework architectures.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-06.md#_snippet_5

LANGUAGE: ts
CODE:
```
const elysia = new Elysia()
    .get('/Hello from Elysia inside Hono inside Elysia')

const hono = new Hono()
    .get('/', (c) => c.text('Hello from Hono!'))
    .mount('/elysia', elysia.fetch)

const main = new Elysia()
    .get('/', () => 'Hello from Elysia')
    .mount('/hono', hono.fetch)
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Template Literal Validation
DESCRIPTION: Demonstrates using TypeBox's TemplateLiteral to strictly validate string patterns within Elysia routes. This example shows how to define a model with a template literal and use it in a GET request, ensuring runtime and development-time type safety.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-05.md#_snippet_2

LANGUAGE: ts
CODE:
```
new Elysia()
    .decorate('version', 'Elysia Radiant')
    .model(
        'name',
        Type.TemplateLiteral([
            Type.Literal('Elysia '),
            Type.Union([
                Type.Literal('The Blessing'),
                Type.Literal('Radiant')
            ])
        ])
    )
    // Strictly check for template literal
    .get('/', ({ version }) => version)
```

----------------------------------------

TITLE: Install Drizzle ORM and drizzle-typebox
DESCRIPTION: Command to add Drizzle ORM and the drizzle-typebox package to your project dependencies using Bun.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/drizzle.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun add drizzle-orm drizzle-typebox
```

----------------------------------------

TITLE: Elysia Testing with Eden and Bun (TypeScript)
DESCRIPTION: Provides an example of how to test Elysia applications using `@elysiajs/eden` for client-server interaction and `bun:test` for the testing framework. It covers testing a specific API endpoint with expected error handling.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/index.md#_snippet_7

LANGUAGE: typescript
CODE:
```
// @errors: 2345 2304
// @filename: index.ts
import { Elysia, t } from 'elysia'

export const app = new Elysia()
    .put(
        '/user',
        ({ body, status }) => {
        	if(body.username === 'mika')
				return status(400, {
					success: false,
					message: 'Username already taken'
				} as const)

            return {
            	success: true,
             	message: 'User created'
            } as const
        },
        {
            body: t.Object({
            	username: t.String(),
             	password: t.String()
            })
        }
    )

// @filename: client.ts
// ---cut---
import { treaty } from '@elysiajs/eden'
import { app } from './index'
import { test, expect } from 'bun:test'

const server = treaty(app)

test('should handle duplicated user', async () => {
	const { error } = await server.user.put({
	    username: 'mika',
	})

	expect(error?.value).toEqual({
		success: false,
		message: 'Username already taken'
	})
})
```

----------------------------------------

TITLE: Configure Elysia Precompilation
DESCRIPTION: Controls whether Elysia should precompile all routes ahead of time before starting the server. It's recommended to leave this as false for dynamic compilation on demand.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/configuration.md#_snippet_8

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

new Elysia({
	precompile: true
})
```

----------------------------------------

TITLE: Elysia Handler Basics
DESCRIPTION: Demonstrates the fundamental usage of a handler function within ElysiaJS to respond to a GET request. The handler receives request context and returns a string.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/handler.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    // the function `() => 'hello world'` is a handler
    .get('/', () => 'hello world')
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Treaty Header Priority Example
DESCRIPTION: Demonstrates how Elysia Treaty prioritizes headers from different sources: inline methods, config.headers, and config.fetch.headers. The example shows how headers passed directly in the method call override those in the configuration.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/treaty/config.md#_snippet_4

LANGUAGE: typescript
CODE:
```
const api = treaty<App>('localhost:3000', {
    headers: {
        authorization: 'Bearer Aponia'
    }
})

api.profile.get({
    headers: {
        authorization: 'Bearer Griseo'
    }
})
```

LANGUAGE: typescript
CODE:
```
fetch('http://localhost:3000', {
    headers: {
        authorization: 'Bearer Griseo'
    }
})
```

----------------------------------------

TITLE: Use Server Timing Plugin in Elysia
DESCRIPTION: Demonstrates basic integration of the Server Timing plugin into an Elysia application. After installation, use the `.use()` method to apply the plugin and enable the 'Server-Timing' header.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/server-timing.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { serverTiming } from '@elysiajs/server-timing'

new Elysia()
    .use(serverTiming())
    .get('/', () => 'hello')
    .listen(3000)
```

----------------------------------------

TITLE: Create Reusable Plugin with Configuration
DESCRIPTION: Shows how to create a plugin as a function that accepts configuration parameters, allowing for customizable behavior. This example defines a versioned route based on the provided version number.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/plugin.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const version = (version = 1) => new Elysia()
        .get('/version', version)

const app = new Elysia()
    .use(version(1))
    .listen(3000)
```

----------------------------------------

TITLE: Fastify vs Elysia Routing Comparison
DESCRIPTION: Compares the routing syntax between Fastify and Elysia. Demonstrates defining GET and POST routes with path parameters. Elysia favors method chaining and direct response returns.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import fastify from 'fastify'

const app = fastify()

app.get('/', (request, reply) => {
    reply.send('Hello World')
})

app.post('/id/:id', (request, reply) => {
    reply.status(201).send(request.params.id)
})

app.listen({ port: 3000 })
```

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
    .get('/', 'Hello World')
    .post(
    	'/id/:id',
     	({ status, params: { id } }) => {
      		return status(201, id)
      	}
    )
    .listen(3000)
```

----------------------------------------

TITLE: Prisma Schema Definition
DESCRIPTION: Defines the database schema using Prisma's schema definition language. This example specifies a 'User' model with 'id', 'username', and 'password' fields, and configures the PostgreSQL database connection.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_3

LANGUAGE: prisma
CODE:
```
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  username  String  @unique
  password  String
}
```

----------------------------------------

TITLE: Elysia Scope Levels Example
DESCRIPTION: Demonstrates the behavior of 'local', 'scoped', and 'global' scope types in Elysia.js by applying hooks to different instance levels and observing their propagation.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/plugin.md#_snippet_17

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

// ? Value base on table value provided below
const type = 'local'

const child = new Elysia()
    .get('/child', 'hi')

const current = new Elysia()
    .onBeforeHandle({ as: type }, () => { // [!code ++]
        console.log('hi')
    })
    .use(child)
    .get('/current', 'hi')

const parent = new Elysia()
    .use(current)
    .get('/parent', 'hi')

const main = new Elysia()
    .use(parent)
    .get('/main', 'hi')
```

----------------------------------------

TITLE: TypeScript Configuration for Strict Mode
DESCRIPTION: Configures the TypeScript compiler to enforce strict type checking by setting 'strict' to true in tsconfig.json.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/quick-start.md#_snippet_7

LANGUAGE: json
CODE:
```
{
   	"compilerOptions": {
  		"strict": true
   	}
}
```

----------------------------------------

TITLE: Elysia Macro v1 API Equivalent
DESCRIPTION: Illustrates the underlying mechanism of Elysia Macro v1 by showing how a macro definition translates to direct hook registration. This example demonstrates the equivalent of pushing a function to the 'beforeHandle' lifecycle stack.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/macro.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
    .get('/', () => 'hi', {
        beforeHandle() {
            console.log('Elysia')
        }
    })
```

----------------------------------------

TITLE: Hono Handler Example
DESCRIPTION: Illustrates handling requests in Hono, showing how to manually parse query parameters, request body, and headers using `c.req.query()`, `c.body()`, and `c.req.header()`. It returns a JSON response.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_2

LANGUAGE: ts
CODE:
```
import { Hono } from 'hono'

const app = new Hono()

app.post('/user', async (c) => {
	const limit = c.req.query('limit')
    const { name } = await c.body() // Assumes JSON body
    const auth = c.req.header('authorization')

    return c.json({ limit, name, auth })
})
```

----------------------------------------

TITLE: Elysia End-to-end Type Safety Setup
DESCRIPTION: Illustrates setting up an Elysia server and exporting its type definition (`App`). This is the server-side component for achieving end-to-end type safety with Elysia's Eden client library.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/at-glance.md#_snippet_4

LANGUAGE: typescript
CODE:
```
// @filename: server.ts
import { Elysia, t } from 'elysia'

const app = new Elysia()
    .get('/user/:id', ({ params: { id } }) => id, {
        params: t.Object({
            id: t.Number()
        })
    })
    .listen(3000)

export type App = typeof app
```

----------------------------------------

TITLE: Basic Stream Response Example
DESCRIPTION: Demonstrates creating a basic streaming response in Elysia, sending messages with a delay. It uses the Stream constructor with a manual callback to control the stream's lifecycle.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/stream.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { Stream } from '@elysiajs/stream'

new Elysia()
    .get('/', () => new Stream(async (stream) => {
        stream.send('hello')

        await stream.wait(1000)
        stream.send('world')

        stream.close()
    }))
    .listen(3000)
```

----------------------------------------

TITLE: Hook Type Inheritance Behavior Example
DESCRIPTION: Provides a practical example demonstrating the inheritance patterns of 'local', 'scoped', and 'global' hook types. The table clarifies how hooks defined with different types affect descendant and ancestor instances.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-10.md#_snippet_8

LANGUAGE: typescript
CODE:
```
// ? Value based on table value provided below
const type = 'local'

const child = new Elysia()
    .get('/child', () => 'hello')

const current = new Elysia()
    .onBeforeHandle({ as: type }, () => {
        console.log('hi')
    })
    .use(child)
    .get('/current', () => 'hello')

const parent = new Elysia()
    .use(current)
    .get('/parent', () => 'hello')

const main = new Elysia()
    .use(parent)
    .get('/main', () => 'hello')

/*
By changing the `type` value, the result should be as follows:

| type       | child | current | parent | main |
| ---------- | ----- | ------- | ------ | ---- |
| 'local'    | ✅    | ✅       | ❌     | ❌   |
| 'scope'    | ✅    | ✅       | ✅     | ❌   |
| 'global'   | ✅    | ✅       | ✅     | ✅   |
*/
```

----------------------------------------

TITLE: GraphQL Yoga Context Example
DESCRIPTION: Demonstrates how to add custom context to GraphQL resolvers within an ElysiaJS server using the GraphQL Yoga plugin.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/graphql-yoga.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import {
	Elysia
} from 'elysia'
import {
	yoga
} from '@elysiajs/graphql-yoga'

const app = new Elysia()
	.use(
		yoga({
			typeDefs: /* GraphQL */ `
				type Query {
					hi: String
				}
			`,
			context: {
				name: 'Mobius'
			},
			// If context is a function on this doesn't present
			// for some reason it won't infer context type
			useContext(_) {},
			resolvers: {
				Query: {
					hi: async (parent, args, context) => context.name
				}
			}
		})
	)
	.listen(3000)
```

----------------------------------------

TITLE: Elysia Basic HTTP Verb Handling
DESCRIPTION: Illustrates how to define routes for common HTTP methods like GET and POST in Elysia.js. The server responds with predefined strings based on the HTTP method and path.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/route.md#_snippet_13

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/', 'hello')
    .post('/hi', 'hi')
    .listen(3000)
```

----------------------------------------

TITLE: Configure WebSocket Compression in Elysia
DESCRIPTION: Example of overriding WebSocket configuration in Elysia, specifically enabling `perMessageDeflate` for compression and decompression. This configuration extends Bun's WebSocket API.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/configuration.md#_snippet_19

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

new Elysia({
	websocket: {
		// enable compression and decompression
    	perMessageDeflate: true
	}
})
```

----------------------------------------

TITLE: Elysia App with Swagger Plugin and Prisma Integration
DESCRIPTION: Demonstrates setting up an Elysia application, integrating the Swagger plugin, defining request/response schemas using Elysia's type system, and handling Prisma-related errors.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'
import { PrismaClient } from '@prisma/client'
import { swagger } from '@elysiajs/swagger' // [!code ++]

const db = new PrismaClient()

const app = new Elysia()
    .use(swagger()) // [!code ++]
    .post(
        '/',
        async ({ body }) =>
            db.user.create({
                data: body,
                select: { // [!code ++]
                    id: true, // [!code ++]
                    username: true // [!code ++]
                } // [!code ++]
            }),
        {
            error({ code }) {
                switch (code) {
                    // Prisma P2002: "Unique constraint failed on the {constraint}"
                    case 'P2002':
                        return {
                            error: 'Username must be unique'
                        }
                }
            },
            body: t.Object({
                username: t.String(),
                password: t.String({
                    minLength: 8
                })
            }),
            response: t.Object({ // [!code ++]
                id: t.Number(), // [!code ++]
                username: t.String() // [!code ++]
            }) // [!code ++]
        }
    )

app.listen(3000)

console.log(
    `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`
)
```

----------------------------------------

TITLE: Elysia Encapsulation Example
DESCRIPTION: Illustrates Elysia's approach where plugin side-effects are encapsulated by default unless explicitly stated. This provides a controlled environment for plugin behavior.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_14

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const subRouter = new Elysia()
	s.onBeforeHandle(({ status, headers: { authorization } }) => {
		if(!authorization?.startsWith('Bearer '))
			return status(401)
   	})

const app = new Elysia()
    .get('/', 'Hello World')
    .use(subRouter)
    // doesn't have side-effect from subRouter
    .get('/side-effect', () => 'hi')
```

----------------------------------------

TITLE: Access Server Instance in Elysia
DESCRIPTION: Shows how to access the server instance via `Context.server` to get server properties like the port. It notes that `server` can be nullable in certain environments.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/handler.md#_snippet_17

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
	.get('/port', ({ server }) => {
		return server?.port
	})
	.listen(3000)
```

----------------------------------------

TITLE: Elysia User Sign-up Endpoint (Basic)
DESCRIPTION: Creates a basic '/sign-up' POST endpoint in ElysiaJS that accepts any request body and attempts to create a new user in the database using Prisma. It requires importing PrismaClient and instantiating it.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { PrismaClient } from '@prisma/client' // [!code ++]

const db = new PrismaClient() // [!code ++]

const app = new Elysia()
    .post( // [!code ++]
        '/sign-up', // [!code ++]
        async ({ body }) => db.user.create({ // [!code ++]
            data: body // [!code ++]
        }) // [!code ++]
    ) // [!code ++]
    .listen(3000)

console.log(
    `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`
)
```

----------------------------------------

TITLE: Elysia Handler Example
DESCRIPTION: Demonstrates handling requests in Elysia, showing how properties like query parameters, body, and headers are automatically parsed and accessed via the context object. It returns a plain object which Elysia serializes to JSON.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_3

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
	.post('/user', (ctx) => {
	    const limit = ctx.query.limit
	    const name = ctx.body.name // Assumes JSON body
	    const auth = ctx.headers.authorization

	    return { limit, name, auth }
	})
```

----------------------------------------

TITLE: Path Parameters - ElysiaJS
DESCRIPTION: Illustrates how to use dynamic path parameters in Elysia routes. It shows capturing single parameters like ':id' and wildcard parameters like '*'.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/id/:id', ({ params: { id } }) => id)
    .get('/rest/*', () => 'Rest')
    .listen(3000)
```

----------------------------------------

TITLE: Frontend Client Module Import with Path Alias
DESCRIPTION: Shows how a frontend client, using `@elysiajs/eden`, imports types from the backend using the same path alias '@/*'. Correct configuration is crucial for type inference to work properly.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import { treaty } from '@elysiajs/eden'
import type { app } from '@/index'

const client = treaty<app>('localhost:3000')

// This should be able to resolve the same module both frontend and backend, and not `any`
import { a, b } from '@/controllers'
```

----------------------------------------

TITLE: Hono Encapsulation Example
DESCRIPTION: Demonstrates Hono's default behavior of encapsulating plugin side-effects. Plugins are isolated by default, preventing unintended side-effects from propagating.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_13

LANGUAGE: ts
CODE:
```
import { Hono } from 'hono'

const subRouter = new Hono()

subRouter.get('/user', (c) => {
	return c.text('Hello User')
})

const app = new Hono()

app.route('/api', subRouter)
```

----------------------------------------

TITLE: Define and Use Async Plugin (Deferred Module)
DESCRIPTION: Demonstrates creating an asynchronous plugin that is registered after the Elysia server starts. This pattern is useful for deferring heavy initialization tasks. It includes the plugin definition and its integration into the main application.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/plugin.md#_snippet_24

LANGUAGE: typescript
CODE:
```
import { Elysia, file } from 'elysia'
import { loadAllFiles } from './files'

export const loadStatic = async (app: Elysia) => {
    const files = await loadAllFiles()

    files.forEach((asset) => app
        .get(asset, file(file))
    )

    return app
}
```

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { loadStatic } from './plugin'

const app = new Elysia()
    .use(loadStatic)
```

----------------------------------------

TITLE: Export Elysia Server Type
DESCRIPTION: Exports the Elysia server instance type from your server file. This type is crucial for Eden to correctly infer the structure and types of your API endpoints.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// server.ts
import { Elysia, t } from 'elysia'

const app = new Elysia()
    .get('/', () => 'Hi Elysia')
    .get('/id/:id', ({ params: { id } }) => id)
    .post('/mirror', ({ body }) => body, {
        body: t.Object({
            id: t.Number(),
            name: t.String()
        })
    })
    .listen(3000)

export type App = typeof app // [!code ++]
```

----------------------------------------

TITLE: Compile Elysia to Binary
DESCRIPTION: Compiles an ElysiaJS application into a single, portable binary using Bun. This process optimizes for reduced memory usage and file size, making deployment simpler. It includes flags for compilation, whitespace minification, syntax minification, targeting the Bun platform, and specifying the output file and entry point.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/deploy.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun build \
	--compile \
	--minify-whitespace \
	--minify-syntax \
	--target bun \
	--outfile server \
	./src/index.ts
```

----------------------------------------

TITLE: Elysia Custom HTTP Method
DESCRIPTION: Shows how to register a route for a non-standard HTTP method using Elysia.route. This example uses 'M-SEARCH', demonstrating flexibility in handling various verbs.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/route.md#_snippet_14

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
    .get('/get', 'hello')
    .post('/post', 'hi')
    .route('M-SEARCH', '/m-search', 'connect') // [!code ++]
    .listen(3000)
```

----------------------------------------

TITLE: Hono vs. Elysia Middleware Lifecycle
DESCRIPTION: Illustrates the middleware execution flow in Hono, which uses a queue-based order, and Elysia, which allows interception at specific event points in the request pipeline. Shows global and route-specific middleware examples.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_7

LANGUAGE: ts
CODE:
```
import { Hono } from 'hono'

const app = new Hono()

// Global middleware
app.use(async (c, next) => {
	console.log(`${c.method} ${c.url}`)

	await next()
})

app.get(
	'/protected',
	// Route-specific middleware
	async (c, next) => {
	  	const token = c.headers.authorization

	  	if (!token) {
			c.status(401)
	   		return c.text('Unauthorized')
		}

	  	await next()
	},
	(req, res) => {
  		res.send('Protected route')
	}
)
```

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
	// Global middleware
	.onRequest('/user', ({ method, path }) => {
		console.log(`${method} ${path}`)
	})
	// Route-specific middleware
	.get('/protected', () => 'protected', {
		beforeHandle({ status, headers }) {
  			if (!headers.authorizaton)
     				 return status(401)
		}
	})
```

----------------------------------------

TITLE: ElysiaJS Integration with SvelteKit Server Routes (with Prefix)
DESCRIPTION: This example illustrates integrating ElysiaJS with SvelteKit when the Elysia server is located in a subdirectory, such as `src/routes/api/[...slugs]/+server.ts`. It shows how to configure the Elysia server with a `prefix` option to ensure correct routing within the SvelteKit application. This allows Elysia's routing to function properly regardless of its placement.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/sveltekit.md#_snippet_1

LANGUAGE: typescript
CODE:
```
// src/routes/api/[...slugs]/+server.ts
import { Elysia, t } from 'elysia';

const app = new Elysia({ prefix: '/api' }) // [!code ++]
    .get('/', () => 'hi')
    .post('/', ({ body }) => body, {
        body: t.Object({
            name: t.String()
        })
    })

type RequestHandler = (v: { request: Request }) => Response | Promise<Response>

export const fallback: RequestHandler = ({ request }) => app.handle(request)
```

----------------------------------------

TITLE: ElysiaJS tRPC Integration Example
DESCRIPTION: Demonstrates how to set up and use the tRPC plugin within an ElysiaJS application. It includes initializing tRPC, defining a router with input validation using Elysia's type system, and integrating it into the Elysia server.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/trpc.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Elysia, t as T } from 'elysia'

import { initTRPC } from '@trpc/server'
import { compile as c, trpc } from '@elysiajs/trpc'

const t = initTRPC.create()
const p = t.procedure

const router = t.router({
	greet: p
		// 💡 Using Zod
		//.input(z.string())
		// 💡 Using Elysia's T
		.input(c(T.String()))
		.query(({ input }) => input)
})

export type Router = typeof router

const app = new Elysia().use(trpc(router)).listen(3000)
```

----------------------------------------

TITLE: Universal Runtime API: File Response (TypeScript)
DESCRIPTION: Illustrates the change in handling file responses to support universal runtime compatibility. The example shows how to use the abstracted `file` utility function instead of runtime-specific methods like `Bun.file`.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-12.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { Elysia, file } from 'elysia'

new Elysia()
	.get('/', () => file('./public/index.html'))
```

----------------------------------------

TITLE: Scoped Path Alias Configuration (tsconfig.json)
DESCRIPTION: Recommended `tsconfig.json` configuration for monorepos using scoped path aliases (e.g., '@frontend/*', '@backend/*'). This approach clearly separates module paths for different parts of the monorepo.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_12

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
  	"baseUrl": ".",
	"paths": {
	  "@frontend/*": ["./apps/frontend/src/*"],
	  "@backend/*": ["./apps/backend/src/*"]
	}
  }
}
```

----------------------------------------

TITLE: Eden Treaty Anatomy Example (TypeScript)
DESCRIPTION: Explains the structure of an Eden Treaty call, showing how paths are transformed into object-like properties and methods. It outlines the general syntax for making requests.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/treaty/legacy.md#_snippet_2

LANGUAGE: typescript
CODE:
```
EdenTreaty.<1>.<2>.<n>.<method>({
    ...body,
    $query?: {},
    $fetch?: RequestInit
})
```

----------------------------------------

TITLE: Mount WinterCG Compliant Frameworks
DESCRIPTION: Demonstrates mounting a WinterCG compliant framework (like Hono) into Elysia using the `.mount` method. This allows integrating different web frameworks into a single codebase by passing their fetch handler.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-06.md#_snippet_3

LANGUAGE: ts
CODE:
```
const app = new Elysia()
    .get('/', () => 'Hello from Elysia')
    .mount('/hono', hono.fetch)
```

----------------------------------------

TITLE: Configure Elysia Instance
DESCRIPTION: Demonstrates basic Elysia configuration using the constructor with options like prefix and normalize. This sets up the base behavior for the Elysia application instance.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/configuration.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia({
	prefix: '/v1',
	normalize: true
})
```

----------------------------------------

TITLE: Route Grouping - ElysiaJS
DESCRIPTION: Demonstrates how to group related routes under a common prefix using Elysia's `group` method. This helps organize routes and apply middleware or configurations to a set of routes.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get("/", () => "Hi")
    .group("/auth", app => {
        return app
            .get("/", () => "Hi")
            .post("/sign-in", ({ body }) => body)
            .put("/sign-up", ({ body }) => body)
    })
    .listen(3000)
```

----------------------------------------

TITLE: Set Executable Permission and Run Binary
DESCRIPTION: Ensures the compiled binary has execute permissions on Linux systems and then runs the server. This is a common step for binaries deployed on Linux distributions.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/deploy.md#_snippet_3

LANGUAGE: bash
CODE:
```
chmod +x ./server

./server
```

----------------------------------------

TITLE: Basic WebSocket Server
DESCRIPTION: Demonstrates setting up a basic WebSocket server using Elysia's `ws()` method, which echoes received messages back to the client.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/websocket.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .ws('/ws', {
        message(ws, message) {
            ws.send(message)
        }
    })
    .listen(3000)
```

----------------------------------------

TITLE: File Upload with t.File - ElysiaJS
DESCRIPTION: Illustrates handling file uploads in Elysia using the `t.File` and `t.Files` schema types. It shows how to define expected file types and accept single or multiple file uploads.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
	.post('/body', ({ body }) => body, {

```

----------------------------------------

TITLE: Elysia Schema Migration Example
DESCRIPTION: Demonstrates how to migrate from the old `schema` hook property to the new direct property assignment for defining request schemas in Elysia. This change simplifies schema definition and improves clarity.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-05.md#_snippet_15

LANGUAGE: ts
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
  .post('/', ({ body }) => body, {
    // from
    // schema: {
    //     body: t.Object({
    //         username: t.String()
    //     })
    // }

    // to
    body: t.Object({
        username: t.String()
    })
  })
  .listen(3000)
```

----------------------------------------

TITLE: Return JSON Response - ElysiaJS
DESCRIPTION: Demonstrates how Elysia automatically converts JavaScript objects returned from handlers into JSON responses. This simplifies API development by handling serialization.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/json', () => {
        return {
            hello: 'Elysia'
        }
    })
    .listen(3000)
```

----------------------------------------

TITLE: Bun Build External Module
DESCRIPTION: Example command to build an ElysiaJS application with Bun, excluding a specific module (e.g., 'pg') to ensure OpenTelemetry instrumentation works correctly by preventing it from being bundled. This ensures the module is imported from node_modules at runtime.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/opentelemetry.md#_snippet_5

LANGUAGE: bash
CODE:
```
bun build --compile --external pg --outfile server src/index.ts
```

----------------------------------------

TITLE: Consume Elysia API with Eden Treaty
DESCRIPTION: Demonstrates how to use Eden Treaty to create a type-safe client for your Elysia server. It shows fetching data from different endpoints and sending POST requests, leveraging the exported server type for full type inference.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_2

LANGUAGE: typescript
CODE:
```
// @filename: server.ts
import { Elysia, t } from 'elysia'

const app = new Elysia()
    .get('/', 'Hi Elysia')
    .get('/id/:id', ({ params: { id } }) => id)
    .post('/mirror', ({ body }) => body, {
        body: t.Object({
            id: t.Number(),
            name: t.String()
        })
    })
    .listen(3000)

export type App = typeof app // [!code ++]

// @filename: index.ts
// ---cut---
// client.ts
import { treaty } from '@elysiajs/eden'
import type { App } from './server' // [!code ++]

const client = treaty<App>('localhost:3000') // [!code ++]

// response: Hi Elysia
const { data: index } = await client.get()

// response: 1895
const { data: id } = await client.id({ id: 1895 }).get()

// response: { id: 1895, name: 'Skadi' }
const { data: nendoroid } = await client.mirror.post({
    id: 1895,
    name: 'Skadi'
})

// @noErrors
client.
//     ^|
```

----------------------------------------

TITLE: Return File Response - ElysiaJS
DESCRIPTION: Shows how to return files as part of a response using Elysia's `file` utility. The response object must be a 1-level deep object containing the file reference.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { Elysia, file } from 'elysia'

new Elysia()
    .get('/json', () => {
        return {
            hello: 'Elysia',
            image: file('public/cat.jpg')
        }
    })
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Method Chaining for Type Inference
DESCRIPTION: Demonstrates the correct way to use Elysia's method chaining to preserve type information. Each chained method returns a new Elysia instance type, allowing subsequent methods to correctly infer and utilize stored types.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .state('build', 1)
    // Store is strictly typed // [!code ++]
    .get('/', ({ store: { build } }) => build)
    .listen(3000)
```

----------------------------------------

TITLE: Vue Script Setup for Blog Landing Page
DESCRIPTION: This snippet defines the data structure for displaying a list of blog posts within a Vue.js application. It includes properties for the blog post title, URL, cover image, and a brief detail.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog.md#_snippet_0

LANGUAGE: vue
CODE:
```
<script setup>
    import Blogs from './components/blog/Landing.vue'
</script>

<Blogs
  :blogs="[
      {
        title: 'Elysia 1.3 and Scientific Witchery',
        href: '/blog/elysia-13',
        cover: 'elysia-13.webp',
        detail: 'Near 0 overhead normalization with Exact Mirror, Bun System Router, Standalone Validator, Half the type instatiation, and significant memory usage reduction and faster start up time.'
      },
      {
        title: 'Elysia 1.2 - You and Me',
        href: '/blog/elysia-12',
        cover: 'elysia-12.webp',
        detail: 'Introducing Adapter for universal runtime suppport, Object macro with resolve, Parser with custom name, WebSocket with lifecycle, TypeBox 0.34 with recursive type, and Eden validation inference.'
      },
	  {
	    title: 'Elysia 1.1 - Grown-up\'s Paradise',
	    href: '/blog/elysia-11',
        cover: 'elysia-11.webp',
	    detail: 'Introducing OpenTelemetry, and Trace v2. Data coercion and normalization. Guard plugin and bulk cast. Optional path parameter. Decorator and Response status reconcilation. Generator response stream.'
	  },
      {
        title: 'Elysia 1.0 - Lament of the Fallen',
        href: '/blog/elysia-10',
        cover: 'lament-of-the-fallen.webp',
        detail: 'Introducing Sucrose, a better static code analysis engine, improved starts up time up to 14x, remove 40 routes/instance limitation, faster type inference up to ~3.8x, Eden Treaty 2, Hook type (breaking change), and inline error for strict type check.'
      },
      {
        title: 'Introducing Elysia 0.8 - Gate of Steiner',
        href: '/blog/elysia-08',
        cover: 'gate-of-steiner.webp',
        detail: 'Introducing Macro API, a new way to interact with Elysia. New Lifecycle, resolve, and mapResponse to interact with Elysia even more. Static Content to compile static resource ahead of time. Default Property, Default Header and several improvement.'
      },
      {
        title: 'Introducing Elysia 0.7 - Stellar Stellar',
        href: '/blog/elysia-07',
        cover: 'stellar-stellar.webp',
        detail: 'Introducing up to 13x faster type inference. Declarative telemetry with trace. Reactive cookie model, and cookie validation. TypeBox 0.31 and custom decoder support. Rewritten Web Socket. Definitions remapping and custom affix. Leading more solid foundation for Elysia for a brighter future.'
      },
      {
        title: 'Introducing Elysia 0.6 - This Game',
        href: '/blog/elysia-06',
        cover: 'this-game.webp',
        detail: 'Introducing re-imagined plugin model, dynamic mode, better developer experience with declarative custom error, customizable loose and strict path mapping, TypeBox 0.30 and WinterCG framework interlop. Pushing the boundary of what is possible once again'
      },
      {
        title: 'Accelerate your next Prisma server with Elysia',
        href: '/blog/with-prisma',
        cover: 'prism.webp',
        detail: 'With the support of Prisma with Bun and Elysia, we are entering a new era of a new level of developer experience. For Prisma we can accelerate our interaction with database, Elysia accelerate our creation of backend web server in term of both developer experience and performance.'
      },
      {
          title: 'Introducing Elysia 0.5 - Radiant',
          href: '/blog/elysia-05',
          cover: 'radiant.webp',
          detail: 'Introducing Static Code Analysis, New router Memoirist, TypeBox 0.28, Numeric type, inline schema, state/decorate/model/group rework, and type stability.'
      },
      {
          title: 'Introducing Elysia 0.4 - 月夜の音楽会 (Moonlit Night Concert)',
          href: '/blog/elysia-04',
          cover: 'moonlit-night-concert.webp',
          detail: 'Introducing Ahead of Time Compilation, TypeBox 0.26, Response validation per status, and Separation of Elysia Fn.'
      },
      {
          title: 'Elysia with Supabase. Your next backend at sonic speed',
          href: '/blog/elysia-supabase',
          cover: 'elysia-supabase.webp',
          detail: 'Elysia, and Supabase are a great match for rapidly developing prototype in less than a hour, let\'s take a look of how we can take advantage of both.'
      },
      {
          title: 'Introducing Elysia 0.3 - 大地の閾を探して [Looking for Edge of Ground]',
          href: '/blog/elysia-03',
          cover: 'edge-of-ground.webp',
          detail: 'Introducing Elysia Fn, Type Rework for highly scalable TypeScript performance, File Upload support and validation, Reworked Eden Treaty.'
      }
  ]

```

----------------------------------------

TITLE: User API Endpoints
DESCRIPTION: Defines the API endpoints for user authentication and profile management. Includes sign-up, sign-in, sign-out, and retrieving the current user's profile.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_45

LANGUAGE: APIDOC
CODE:
```
User API (/user):

PUT /sign-up
  Description: Registers a new user.
  Request Body:
    username: string (minimum length 1)
    password: string (minimum length 8)
  Response:
    200 OK: User created successfully.
    400 Bad Request: If the user already exists.

POST /sign-in
  Description: Authenticates a user and creates a session.
  Request Body:
    username: string (minimum length 1)
    password: string (minimum length 8)
  Cookie:
    token: number (optional session token)
  Response:
    200 OK: User signed in successfully, returns a success message.
    400 Bad Request: If username or password are invalid.

GET /sign-out
  Description: Logs out the current user by removing the session token.
  Cookie:
    token: number (optional session token)
  Response:
    200 OK: User signed out successfully.

GET /profile
  Description: Retrieves the profile of the currently authenticated user.
  Authentication:
    Requires user to be signed in (isSignIn: true).
  Response:
    200 OK: Returns the username of the logged-in user.

```

----------------------------------------

TITLE: ElysiaJS Integration with SvelteKit Server Routes
DESCRIPTION: This snippet shows how to integrate ElysiaJS into SvelteKit server routes by creating a `+server.ts` file. It demonstrates exporting Elysia handlers for GET and POST requests, allowing Elysia to manage backend logic within the SvelteKit application. The `fallback` export can be used to handle all HTTP methods.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/sveltekit.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// src/routes/[...slugs]/+server.ts
import { Elysia, t } from 'elysia';

const app = new Elysia()
    .get('/', () => 'hello SvelteKit')
    .post('/', ({ body }) => body, {
        body: t.Object({
            name: t.String()
        })
    })

type RequestHandler = (v: { request: Request }) => Response | Promise<Response>

export const GET: RequestHandler = ({ request }) => app.handle(request)
export const POST: RequestHandler = ({ request }) => app.handle(request)
// or simply
export const fallback: RequestHandler = ({ request }) => app.handle(request)
```

----------------------------------------

TITLE: Add Dependencies for Elysia tRPC Integration
DESCRIPTION: Installs necessary packages for integrating tRPC with Elysia. This includes the tRPC server, Zod for schema validation, the Elysia tRPC plugin, and the Elysia CORS plugin.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/integrate-trpc-with-elysia.md#_snippet_1

LANGUAGE: bash
CODE:
```
bun add @trpc/server zod @elysiajs/trpc @elysiajs/cors
```

----------------------------------------

TITLE: ElysiaJS Vue Component Imports
DESCRIPTION: Sets up a Vue component script by importing necessary components like Card, Deck, and Playground, which are likely used for UI elements in the ElysiaJS documentation or examples.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_2

LANGUAGE: vue
CODE:
```
<script setup>
import Card from '../components/nearl/card.vue'
import Deck from '../components/nearl/card-deck.vue'
import Playground from '../components/nearl/playground.vue'

import { Elysia } from 'elysia'

// Elysia instance setup follows...
</script>
```

----------------------------------------

TITLE: Elysia Plugin Scoping for Encapsulation
DESCRIPTION: Illustrates Elysia's approach to plugin encapsulation, where side-effects are scoped to the instance they are used with by default. This example defines a sub-router with an 'onBeforeHandle' hook that checks for authorization.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-express.md#_snippet_13

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const subRouter = new Elysia()
	.onBeforeHandle(({ status, headers: { authorization } }) => {
		if(!authorization?.startsWith('Bearer '))
			return status(401)
   	})

const app = new Elysia()
    .get('/', 'Hello World')
    .use(subRouter)
    // doesn't have side-effect from subRouter
    .get('/side-effect', () => 'hi')
```

----------------------------------------

TITLE: Initialize Prisma Project
DESCRIPTION: Initializes a new Prisma project within your existing directory. This command generates the Prisma configuration files, including schema.prisma and a .env file.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_2

LANGUAGE: typescript
CODE:
```
bunx prisma init
```

----------------------------------------

TITLE: Fetch API Request with Query Parameters
DESCRIPTION: Shows a basic example of making a `fetch` request with query parameters appended to the URL. This demonstrates how client-side requests send query data that Elysia.js can then parse and validate.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_11

LANGUAGE: typescript
CODE:
```
fetch('https://elysiajs.com/?name=Elysia')
```

----------------------------------------

TITLE: Define and Use Basic Elysia Plugin
DESCRIPTION: Demonstrates creating a simple Elysia plugin with a decorator and a route, then using it with the `app.use()` method. Shows how the plugin's functionality is integrated into the main application instance.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/plugin.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const plugin = new Elysia()
    .decorate('plugin', 'hi')
    .get('/plugin', ({ plugin }) => plugin)

const app = new Elysia()
    .use(plugin)
    .get('/', ({ plugin }) => plugin)
               // ^?
    .listen(3000)
```

----------------------------------------

TITLE: Elysia 0.8 to 1.0 Migration Example
DESCRIPTION: Shows the specific syntax changes required when migrating from ElysiaJS version 0.8 to 1.0 for hooks like `onBeforeHandle` and `derive`. Global hooks in 0.8 now require explicit `{ as: 'global' }` in version 1.0.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-10.md#_snippet_9

LANGUAGE: typescript
CODE:
```
// From Elysia 0.8
new Elysia()
    .onBeforeHandle(() => "A")
    .derive(() => {})

// Into Elysia 1.0
new Elysia()
    .onBeforeHandle({ as: 'global' }, () => "A")
    .derive({ as: 'global' }, () => {})
```

----------------------------------------

TITLE: Run Elysia Unit Tests
DESCRIPTION: Shows the command to execute unit tests for an Elysia project using the Bun test runner.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/unit-test.md#_snippet_1

LANGUAGE: bash
CODE:
```
bun test
```

----------------------------------------

TITLE: Elysia.js Custom Error Message Examples
DESCRIPTION: Provides examples of using the 'error' property with various TypeBox types in Elysia.js to customize validation error messages. This includes strings, arrays, objects, and functional error messages.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_25

LANGUAGE: typescript
CODE:
```
t.String({
    format: 'email',
    error: 'Invalid email :('
})
```

LANGUAGE: typescript
CODE:
```
t.Array(
    t.String(),
    {
        error: 'All members must be a string'
    }
)
```

LANGUAGE: typescript
CODE:
```
t.Object({
    x: t.Number()
}, {
    error: 'Invalid object UwU'
})
```

LANGUAGE: typescript
CODE:
```
t.Object({
    x: t.Number({
        error({ errors, type, validation, value }) {
            return 'Expected x to be a number'
        }
    })
})
```

----------------------------------------

TITLE: Define Singleton Class and Decorate Elysia Instance
DESCRIPTION: Demonstrates how to create a singleton class and inject it into the Elysia instance using the `decorate` method. This allows the class instance to be accessed within route handlers.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { swagger } from '@elysiajs/swagger'

class Note {
    constructor(public data: string[] = ['Moonhalo']) {}
}

const app = new Elysia()
    .use(swagger())
    .decorate('note', new Note())
    .get('/note', ({ note }) => note.data)
    .listen(3000)
```

----------------------------------------

TITLE: Implement tRPC Subscriptions
DESCRIPTION: Details the implementation of tRPC subscriptions using `observable` and `EventEmitter`. This setup allows for real-time data streaming, handling events emitted from the server to subscribed clients.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/integrate-trpc-with-elysia.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { initTRPC } from '@trpc/server'
import { observable } from '@trpc/server/observable'
import type { FetchCreateContextFnOptions } from '@trpc/server/adapters/fetch'

import { EventEmitter } from 'stream'

import { zod } from 'zod'

export const createContext = async (opts: FetchCreateContextFnOptions) => {
    return {
        name: 'elysia'
    }
}

const t = initTRPC.context<Awaited<ReturnType<typeof createContext>>>().create()
const ee = new EventEmitter()

export const router = t.router({
    mirror: t.procedure.input(z.string()).query(({ input }) => {
        ee.emit('listen', input)

        return input
    }),
    listen: t.procedure.subscription(() =>
        observable<string>((emit) => {
            ee.on('listen', (input) => {
                emit.next(input)
            })
        })
    )
})

export type Router = typeof router
```

----------------------------------------

TITLE: ElysiaJS API Documentation with Swagger
DESCRIPTION: Provides access to the OpenAPI schema generated by ElysiaJS, viewable via Scalar at the /swagger endpoint. Allows interaction with all defined routes through a user-friendly interface.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Swagger UI:
  Description: Access the interactive API documentation generated by ElysiaJS using the @elysiajs/swagger plugin.
  Endpoint: http://localhost:3000/swagger
  Features:
    - Interact with GET, POST, PUT, DELETE, etc. methods.
    - View request/response schemas.
    - Test API endpoints directly.

Elysia Routes:
  GET /
    Description: Returns the current path.
    Response:
      200: string (The path)

  POST /hello
    Description: A simple POST endpoint.
    Response:
      200: string (A predefined message)
```

----------------------------------------

TITLE: Elysia OpenTelemetry Axiom Exporter Configuration
DESCRIPTION: Configures the OpenTelemetry plugin to export traces to Axiom. This example demonstrates setting the `url` and `headers` for the `OTLPTraceExporter`, including authentication via `AXIOM_TOKEN` and specifying the `X-Axiom-Dataset`.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-11.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { opentelemetry } from '@elysiajs/opentelemetry'

import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-node'
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto'

new Elysia()
	.use(
		opentelemetry({
			spanProcessors: [
				new BatchSpanProcessor(
					new OTLPTraceExporter({
						url: 'https://api.axiom.co/v1/traces',
						headers: {
						    Authorization: `Bearer ${Bun.env.AXIOM_TOKEN}`,
						    'X-Axiom-Dataset': Bun.env.AXIOM_DATASET
						}
					})
				)
			]
		})
	)

```

----------------------------------------

TITLE: ElysiaJS Serve Options Documentation
DESCRIPTION: Provides details on various `serve` configuration options including hostname, ID for hot reloading, maximum request body size, port, TLS settings, and Unix socket usage.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/configuration.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
serve:
  hostname: string
    @default `0.0.0.0`
    Set the hostname which the server listens on
  id: string | null
    Uniquely identify a server instance with an ID for hot reloading. Set to null to disable hot reloading.
  maxRequestBodySize: number
    @default `1024 * 1024 * 128` (128MB)
    Set the maximum size of a request body (in bytes)
  maxPayloadLength: number
    Maximum message size (in bytes)
  port: number
    @default `3000`
    Port to listen on
  rejectUnauthorized: boolean
    @default `NODE_TLS_REJECT_UNAUTHORIZED` environment variable
    If set to `false`, any certificate is accepted.
  reusePort: boolean
    @default `true`
    If the `SO_REUSEPORT` flag should be set, allowing multiple processes to bind to the same port.
  unix: string
    If set, the HTTP server will listen on a unix socket instead of a port. Cannot be used with hostname+port.
  tls: {
    ca?: Buffer | string | Array<Buffer | string>
      Optionally override the trusted CA certificates. Default is to trust well-known CAs.
    cert: Buffer | string | Array<Buffer | string>
      Cert chains in PEM format. Required for TLS.
    dhParamsFile?: Buffer | string
      File path to a .pem file custom Diffie Helman parameters.
    key: Buffer | string | Array<Buffer | string>
      Private key in PEM format. Required for TLS.
  }
    We can enable TLS (known as successor of SSL) by passing in a value for key and cert; both are required to enable TLS.
    Elysia extends Bun configuration which supports TLS out of the box, powered by BoringSSL.
    See serve.tls for available configuration.
```

----------------------------------------

TITLE: Add Email Development Script to package.json
DESCRIPTION: Adds a script to your package.json file to easily start the React Email development server. This command watches for changes in the specified email directory (`src/emails`) and provides a live preview.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/react-email.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  "scripts": {
    "email": "email dev --dir src/emails"
  }
}
```

----------------------------------------

TITLE: ElysiaJS: Create Plugin for Routes
DESCRIPTION: Demonstrates how to extract route handlers and decorators into a separate Elysia instance, which can then be used as a plugin. This promotes modularity and cleaner code organization by separating concerns into distinct files.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_16

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

class Note {
    constructor(public data: string[] = ['Moonhalo']) {}
}

export const note = new Elysia()
    .decorate('note', new Note())
    .get('/note', ({ note }) => note.data)
    .get(
        '/note/:index',
        ({ note, params: { index }, status }) => {
            return note.data[index] ?? status(404, 'oh no :(')
        },
        {
            params: t.Object({
                index: t.Number()
            })
        }
    )
```

----------------------------------------

TITLE: Elysia Service Locator for Type Safety
DESCRIPTION: Demonstrates the Service Locator pattern in Elysia.js to ensure type safety for plugins applied to different instances. By referencing the plugin instance (e.g., `setup`), Elysia can correctly infer types.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/plugin.md#_snippet_11

LANGUAGE: typescript
CODE:
```
// @errors: 2339
import { Elysia } from 'elysia'

const setup = new Elysia({ name: 'setup' })
    .decorate('a', 'a')

// Without 'setup', type will be missing
const error = new Elysia()
    .get('/', ({ a }) => a)

const main = new Elysia()
	// With `setup`, type will be inferred
    .use(setup)
    .get('/', ({ a }) => a)
    //           ^?
```

----------------------------------------

TITLE: Elysia.js User Module with Plugin
DESCRIPTION: Illustrates how to create an Elysia.js module ('user') that utilizes a previously defined service plugin ('userService'). It shows how state and models are inherited, preventing re-registration.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_26

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'
import { userService } from './userService'

export const user = new Elysia({ prefix: '/user' })
    .use(userService)
```

----------------------------------------

TITLE: Elysia Adapter Initialization (TypeScript)
DESCRIPTION: Demonstrates how to initialize Elysia with a specific adapter, in this case, the Node.js adapter. This allows Elysia to run on different runtimes beyond its primary Bun environment.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-12.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { node } from '@elysiajs/node'

new Elysia({ adapter: node() })
	.get('/', 'Hello Node')
	.listen(3000)
```

----------------------------------------

TITLE: OpenTelemetry Plugin Configuration Reference
DESCRIPTION: Provides a comprehensive reference for configuring the OpenTelemetry plugin for ElysiaJS. Covers automatic resource detection, context management, text map propagation, metric readers, views for histogram configuration, instrumentation setup, resource definition, resource detector configuration via environment variables, sampling strategies, service naming, span processing, trace exporting, and span limit adjustments.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/opentelemetry.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Elysia OpenTelemetry Plugin Configuration:

autoDetectResources - boolean
  Detect resources automatically from the environment using the default resource detectors.
  default: `true`

contextManager - ContextManager
  Use a custom context manager.
  default: `AsyncHooksContextManager`

textMapPropagator - TextMapPropagator
  Use a custom propagator.
  default: `CompositePropagator` using W3C Trace Context and Baggage

metricReader - MetricReader
  Add a MetricReader that will be passed to the MeterProvider.

views - View[]
  A list of views to be passed to the MeterProvider.
  Accepts an array of View-instances. This parameter can be used to configure explicit bucket sizes of histogram metrics.

instrumentations - (Instrumentation | Instrumentation[])[]
  Configure instrumentations.
  By default `getNodeAutoInstrumentations` is enabled, if you want to enable them you can use either metapackage or configure each instrumentation individually.
  default: `getNodeAutoInstrumentations()`

resource - IResource
  Configure a resource.
  Resources may also be detected by using the autoDetectResources method of the SDK.

resourceDetectors - Array<Detector | DetectorSync>
  Configure resource detectors. By default, the resource detectors are [envDetector, processDetector, hostDetector]. NOTE: In order to enable the detection, the parameter autoDetectResources has to be true.
  If resourceDetectors was not set, you can also use the environment variable OTEL_NODE_RESOURCE_DETECTORS to enable only certain detectors, or completely disable them:
  - env
  - host
  - os
  - process
  - serviceinstance (experimental)
  - all - enable all resource detectors above
  - none - disable resource detection
  For example, to enable only the env, host detectors:
  ```bash
  export OTEL_NODE_RESOURCE_DETECTORS="env,host"
  ```

sampler - Sampler
  Configure a custom sampler. By default, all traces will be sampled.

serviceName - string
  Namespace to be identify as.

spanProcessors - SpanProcessor[]
  An array of span processors to register to the tracer provider.

traceExporter - SpanExporter
  Configure a trace exporter. If an exporter is configured, it will be used with a `BatchSpanProcessor`.
  If an exporter OR span processor is not configured programmatically, this package will auto setup the default otlp exporter with http/protobuf protocol with a BatchSpanProcessor.

spanLimits - SpanLimits
  Configure tracing parameters. These are the same trace parameters used to configure a tracer.

```

----------------------------------------

TITLE: ElysiaJS: Old Route Limit Example
DESCRIPTION: Demonstrates the previous limitation in ElysiaJS where stacking too many routes (around 40) could lead to TypeScript's 'Type instantiation is excessively deep' error.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-10.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const main = new Elysia()
    .get('/1', () => '1')
    .get('/2', () => '2')
    .get('/3', () => '3')
    // repeat for 40 times
    .get('/42', () => '42')
    // Type instantiation is excessively deep and possibly infinite
```

----------------------------------------

TITLE: Running Elysia Tests (Bash)
DESCRIPTION: A simple bash command to execute tests for an Elysia application using the Bun runtime.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/index.md#_snippet_8

LANGUAGE: bash
CODE:
```
$ bun test
```

----------------------------------------

TITLE: Elysia Affix: Remap Plugin Properties with Prefix
DESCRIPTION: Demonstrates using the `prefix` method from Elysia's Affix functionality to remap plugin properties, preventing name collisions and organizing decorators. This example shows remapping for 'decorator' properties.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-07.md#_snippet_11

LANGUAGE: typescript
CODE:
```
const setup = new Elysia({ name: 'setup' })
    .decorate({
        argon: 'a',
        boron: 'b',
        carbon: 'c'
    })

const app = new Elysia()
    .use(
        setup
            .prefix('decorator', 'setup')
    )
    .get('/', ({ setupCarbon }) => setupCarbon)
```

----------------------------------------

TITLE: Elysia Resolve Lifecycle Example
DESCRIPTION: Illustrates the 'resolve' lifecycle hook in Elysia, a safer alternative to 'derive'. It appends new values to the context after validation, executing in the same queue as 'beforeHandle'. This example shows retrieving a bearer token from the Authorization header.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-08.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .guard(
        {
            headers: t.Object({
                authorization: t.TemplateLiteral('Bearer ${string}')
            })
        },
        (app) =>
            app
                .resolve(({ headers: { authorization } }) => {
                    return {
                        bearer: authorization.split(' ')[1]
                    }
                })
                .get('/', ({ bearer }) => bearer)
    )
    .listen(3000)
```

----------------------------------------

TITLE: Compile Elysia to JavaScript
DESCRIPTION: Bundles an ElysiaJS application into a single JavaScript file for deployment, particularly useful for environments where compiling to a binary is not feasible (e.g., certain Windows servers). The output is a portable JavaScript file that can be executed using Node.js or Bun.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/deploy.md#_snippet_4

LANGUAGE: bash
CODE:
```
bun build \
	--compile \
	--minify-whitespace \
	--minify-syntax \
	--target bun \
	--outfile ./dist/index.js \
	./src/index.ts
```

----------------------------------------

TITLE: ElysiaJS Local Hook afterHandle Example
DESCRIPTION: Illustrates using a local hook, specifically 'afterHandle', to modify the response based on its content type. This example checks if the response is HTML and sets the 'Content-Type' header accordingly, demonstrating how to customize responses per route.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { isHtml } from '@elysiajs/html'

new Elysia()
    .get('/', () => '<h1>Hello World</h1>', {
        afterHandle({ response, set }) {
            if (isHtml(response))
                set.headers['Content-Type'] = 'text/html; charset=utf8'
        }
    })
    .get('/hi', () => '<h1>Hello World</h1>')
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Server Setup with tRPC and Eden
DESCRIPTION: Sets up an Elysia server with CORS and WebSocket support, integrating tRPC for API routing. It exports the application type for client-side type inference using Eden.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/integrate-trpc-with-elysia.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import { Elysia, ws } from 'elysia'
import { cors } from '@elysiajs/cors'
import { trpc } from '@elysiajs/trpc'

import { router, createContext } from './trpc'

const app = new Elysia()
    .use(cors())
    .use(ws())
    .get('/', () => 'Hello Elysia')
    .use(
        trpc(router, {
            createContext
        })
    )
    .listen(3000)

export type App = typeof app // [!code ++]

console.log(`🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`)
```

----------------------------------------

TITLE: Monorepo Path Alias Correction (tsconfig.json)
DESCRIPTION: Corrected `tsconfig.json` configuration for a monorepo, adjusting the path alias '@/*' to point to the backend's source directory ('../apps/backend/src/*'). This ensures consistent resolution across different packages.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_10

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
  	"baseUrl": ".",
	"paths": {
	  "@/*": ["../apps/backend/src/*"]
	}
  }
}
```

----------------------------------------

TITLE: Hono OpenAPI Integration
DESCRIPTION: Demonstrates setting up OpenAPI specifications with Hono using the `hono-openapi` library. It includes defining schemas, describing routes, and serving Swagger UI. Requires `hono`, `hono-openapi`, and `@hono/zod-openapi`.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_20

LANGUAGE: ts
CODE:
```
import { Hono } from 'hono'
import { describeRoute, openAPISpecs } from 'hono-openapi'
import { resolver, validator as zodValidator } from 'hono-openapi/zod'
import { swaggerUI } from '@hono/swagger-ui'

import { z } from '@hono/zod-openapi'

const app = new Hono()

const model = z.array(
	z.object({
		name: z.string().openapi({
			description: 'first name only'
		}),
		age: z.number()
	})
)

const detail = await resolver(model).builder()

console.log(detail)

app.post(
	'/',
	zodValidator('json', model),
	describeRoute({
		validateResponse: true,
		summary: 'Create user',
		requestBody: {
			content: {
				'application/json': { schema: detail.schema }
			}
		},
		responses: {
			201: {
				description: 'User created',
				content: {
					'application/json': { schema: resolver(model) }
				}
			}
		}
	}),
	(c) => {
		c.status(201)
		return c.json(c.req.valid('json'))
	}
)

app.get('/ui', swaggerUI({ url: '/doc' }))

app.get(
	'/doc',
	openAPISpecs(app, {
		documentation: {
			info: {
				title: 'Hono API',
				version: '1.0.0',
				description: 'Greeting API'
			},
			components: {
				...detail.components
			}
		}
	})
)

export default app

```

----------------------------------------

TITLE: ElysiaJS Normalization: Body/Response Filtering Example
DESCRIPTION: Illustrates Elysia 1.1's data normalization feature, which enforces schema consistency by removing extra fields from request bodies and response payloads. This example shows how fields not defined in the schema are automatically filtered out.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-11.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'
import { treaty } from '@elysiajs/eden'

const app = new Elysia()
	.post('/', ({ body }) => body, {
		body: t.Object({
			name: t.String(),
			point: t.Number()
		}),
		response: t.Object({
			name: t.String()
		})
	})

const { data } = await treaty(app).index.post({
	name: 'SaltyAom',
	point: 9001,
	// ⚠️ additional field
	title: 'maintainer'
})

// 'point' is removed as defined in response
console.log(data) // { name: 'SaltyAom' }
```

----------------------------------------

TITLE: Error Handling in Fastify and Elysia
DESCRIPTION: This example showcases error handling strategies in both Fastify and Elysia. It demonstrates setting up global error handlers using `setErrorHandler` (Fastify) and `.onError` (Elysia), as well as route-specific error handlers. Elysia's approach includes custom error codes and a `toResponse` method for mapping errors to specific HTTP responses.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_12

LANGUAGE: ts
CODE:
```
import fastify from 'fastify'

const app = fastify()

class CustomError extends Error {
	constructor(message: string) {
		super(message)
		this.name = 'CustomError'
	}
}

// global error handler
app.setErrorHandler((error, request, reply) => {
	if (error instanceof CustomError)
		reply.status(500).send({
			message: 'Something went wrong!',
			error
		})
})

app.get(
	'/error',
	{
		// route-specific error handler
		errorHandler(error, request, reply) {
			reply.send({
				message: 'Only for this route!',
				error
			})
		}
	},
	(request, reply) => {
		throw new CustomError('oh uh')
	}
)
```

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

class CustomError extends Error {
	// Optional: custom HTTP status code
	status = 500

	constructor(message: string) {
		super(message)
		this.name = 'CustomError'
	}

	// Optional: what should be sent to the client
	toResponse() {
		return {
			message: "If you're seeing this, our dev forgot to handle this error",
			error: this
		}
	}
}

const app = new Elysia()
	// Optional: register custom error class
	.error({
		CUSTOM: CustomError,
	})
	// Global error handler
	.onError(({ error, code }) => {
		if(code === 'CUSTOM')
			return {
				message: 'Something went wrong!',
				error
			}
	})
	.get('/error', () => {
		throw new CustomError('oh uh')
	}, {
		// Optional: route specific error handler
		error({ error }) {
			return {
				message: 'Only for this route!',
				error
			}
		}
	})
```

----------------------------------------

TITLE: Elysia HTTP Methods API
DESCRIPTION: Details the core HTTP methods supported by Elysia.js for defining routes. Each method accepts a path, a handler function, and optional hooks. Common methods include GET, POST, PUT, PATCH, and DELETE.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/route.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
Elysia.get(path, handler, hook?)
  - Handles GET requests.
  - Parameters:
    - path: string - The URL path to match.
    - handler: Function - The function to execute when the route is matched.
    - hook: object (optional) - Additional metadata or lifecycle hooks.

Elysia.post(path, handler, hook?)
  - Handles POST requests.
  - Parameters:
    - path: string - The URL path to match.
    - handler: Function - The function to execute when the route is matched.
    - hook: object (optional) - Additional metadata or lifecycle hooks.

Elysia.put(path, handler, hook?)
  - Handles PUT requests.
  - Parameters:
    - path: string - The URL path to match.
    - handler: Function - The function to execute when the route is matched.
    - hook: object (optional) - Additional metadata or lifecycle hooks.

Elysia.patch(path, handler, hook?)
  - Handles PATCH requests.
  - Parameters:
    - path: string - The URL path to match.
    - handler: Function - The function to execute when the route is matched.
    - hook: object (optional) - Additional metadata or lifecycle hooks.

Elysia.delete(path, handler, hook?)
  - Handles DELETE requests.
  - Parameters:
    - path: string - The URL path to match.
    - handler: Function - The function to execute when the route is matched.
    - hook: object (optional) - Additional metadata or lifecycle hooks.

Elysia.all(path, handler, hook?)
  - Handles all HTTP methods for a specified path.
  - Parameters:
    - path: string - The URL path to match.
    - handler: Function - The function to execute when the route is matched.
    - hook: object (optional) - Additional metadata or lifecycle hooks.

Elysia.route(method, path, handler, hook?)
  - Handles custom or standard HTTP methods.
  - Parameters:
    - method: string - The HTTP verb (e.g., 'GET', 'POST', 'M-SEARCH'). Case-sensitive.
    - path: string - The URL path to match.
    - handler: Function - The function to execute when the route is matched.
    - hook: object (optional) - Additional metadata or lifecycle hooks.

Elysia.handle(request)
  - Programmatically processes an incoming Request object, simulating a server request.
  - Useful for testing.
  - Parameters:
    - request: Request - The Request object to handle.
  - Returns: Promise<Response> - A Promise resolving to the server's Response.
```

----------------------------------------

TITLE: Elysia Macro v1 Authorization Layer Example
DESCRIPTION: Showcases a more complex use case for Elysia Macro v1, creating an authorization layer for routes. It defines multiple macro fields ('isAuth', 'role') that can be applied to routes for custom logic composition.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/macro.md#_snippet_2

LANGUAGE: typescript
CODE:
```
// @filename: auth.ts
import { Elysia } from 'elysia'

export const auth = new Elysia()
    .macro(() => {
        return {
            isAuth(isAuth: boolean) {},
            role(role: 'user' | 'admin') {},
        }
    })

// @filename: index.ts
// ---cut---
import { Elysia } from 'elysia'
import { auth } from './auth'

const app = new Elysia()
    .use(auth)
    .get('/', () => 'hi', {
        isAuth: true,
        role: 'admin'
    })
```

----------------------------------------

TITLE: Basic Elysia Swagger Plugin Usage
DESCRIPTION: Demonstrates the basic integration of the Elysia Swagger plugin. It initializes an Elysia server, applies the swagger plugin, and defines two simple routes. Accessing '/swagger' will show the generated documentation.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/swagger.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import {
    Elysia
} from 'elysia'
import {
    swagger
} from '@elysiajs/swagger'

new Elysia()
    .use(swagger())
    .get('/', () => 'hi')
    .post('/hello', () => 'world')
    .listen(3000)
```

----------------------------------------

TITLE: Initialize Supabase Client in ElysiaJS
DESCRIPTION: This snippet demonstrates how to initialize the Supabase client in an ElysiaJS project. It utilizes environment variables (`supabase_url`, `supabase_service_role`) loaded by Bun and the `@supabase/supabase-js` library to create a client instance.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-supabase.md#_snippet_3

LANGUAGE: typescript
CODE:
```
// src/libs/supabase.ts
import { createClient } from '@supabase/supabase-js'

const { supabase_url, supabase_service_role } = process.env

export const supabase = createClient(supabase_url!, supabase_service_role!)
```

----------------------------------------

TITLE: Set Headers and Status Code - ElysiaJS
DESCRIPTION: Illustrates how to customize response headers and set a specific HTTP status code within an Elysia handler. It uses the `set` object for headers and the `status` utility for status codes.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_5

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/', ({ set, status }) => {
        set.headers['x-powered-by'] = 'Elysia'

        return status(418, "I'm a teapot")
    })
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Wildcard Path
DESCRIPTION: Demonstrates capturing the rest of a URL segment using the '*' wildcard in an Elysia.js GET route. The captured segment is available in the params['*'].

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/route.md#_snippet_11

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/id/*', ({ params }) => params['*'])
    .listen(3000)
```

----------------------------------------

TITLE: Package JSON Dependencies for OpenTelemetry
DESCRIPTION: Specifies the necessary dependencies in package.json for an ElysiaJS project integrating with OpenTelemetry and the 'pg' library. This includes the ElysiaJS OpenTelemetry plugin, the OpenTelemetry pg instrumentation, and the 'pg' driver itself.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/deploy.md#_snippet_8

LANGUAGE: json
CODE:
```
{
	"dependencies": {
		"pg": "^8.15.6"
	},
	"devDependencies": {
		"@elysiajs/opentelemetry": "^1.2.0",
		"@opentelemetry/instrumentation-pg": "^0.52.0",
		"@types/pg": "^8.11.14",
		"elysia": "^1.2.25"
	}
}
```

----------------------------------------

TITLE: ElysiaJS: Import Plugin into Main Instance
DESCRIPTION: Illustrates how to integrate a custom ElysiaJS plugin into the main application instance using the `.use()` method. This allows the main app to leverage the routes, decorators, and middleware defined within the plugin.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_17

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'
import { swagger } from '@elysiajs/swagger'

import { note } from './note' // [!code ++]

class Note {
    // [!code --]
    constructor(public data: string[] = ['Moonhalo']) {}
// [!code --]
}

const app = new Elysia()
    .use(swagger())
    .use(note) // [!code ++]
    .decorate('note', new Note()) // [!code --]
    .get('/note', ({ note }) => note.data) // [!code --]
    .get(
        // [!code --]
        '/note/:index',
        ({ note, params: { index }, status }) => {
            // [!code --]
            return note.data[index] ?? status(404, 'oh no :(') // [!code --]
        },
        {
            // [!code --]
            params: t.Object({
                // [!code --]
                index: t.Number() // [!code --]
            })
        }
    )
    .listen(3000)
```

----------------------------------------

TITLE: Create Server-Sent Event Endpoint (Value-Based)
DESCRIPTION: Demonstrates creating a Server-Sent Event (SSE) endpoint using ElysiaJS with a value-based stream. This example sets up an endpoint that sends 'hello world' every 500ms for 3 seconds. It utilizes `Stream` for sending events and `setInterval`/`setTimeout` for managing the event flow.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/stream.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { Elysia, Stream } from 'elysia';

new Elysia()
    .get('/source', () => {
        const stream = new Stream();

        const interval = setInterval(() => {
            stream.send('hello world');
        }, 500);

        setTimeout(() => {
            clearInterval(interval);
            stream.close();
        }, 3000);

        return stream;
    })
    .listen(3000);
```

----------------------------------------

TITLE: Consume Elysia API with Eden Fetch (TypeScript)
DESCRIPTION: This code illustrates how to import the exported server type and use Eden Fetch to make type-safe requests to an Elysia server. It shows examples of fetching data from different routes, including path parameters and POST requests with typed bodies.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/fetch.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { edenFetch } from '@elysiajs/eden'
import type { App } from './server'

const fetch = edenFetch<App>('http://localhost:3000')

// response type: 'Hi Elysia'
const pong = await fetch('/hi', {})

// response type: 1895
const id = await fetch('/id/:id', {
    params: {
        id: '1895'
    }
})

// response type: { id: 1895, name: 'Skadi' }
const nendoroid = await fetch('/mirror', {
    method: 'POST',
    body: {
        id: 1895,
        name: 'Skadi'
    }
})
```

----------------------------------------

TITLE: Scaffold Elysia Project with Bun
DESCRIPTION: Command to create a new Elysia project using Bun. This sets up the basic project structure for an Elysia application, ready for further development.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/integrate-trpc-with-elysia.md#_snippet_0

LANGUAGE: bash
CODE:
```
bun create elysia elysia-trpc && cd elysia-trpc && bun add elysia
```

----------------------------------------

TITLE: Configure Elysia with BunAdapter
DESCRIPTION: Sets a specific runtime adapter for Elysia, using BunAdapter for the Bun environment. This allows Elysia to leverage Bun's native capabilities.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/configuration.md#_snippet_1

LANGUAGE: ts
CODE:
```
import { Elysia, t } from 'elysia'
import { BunAdapter } from 'elysia/adapter/bun'

new Elysia({
	adapter: BunAdapter
})
```

----------------------------------------

TITLE: Get Request IP Address in Elysia
DESCRIPTION: Explains how to retrieve the IP address of an incoming request using the `server.requestIP` method. It requires passing the `request` object to the method.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/handler.md#_snippet_18

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
	.get('/ip', ({ server, request }) => {
		return server?.requestIP(request)
	})
	.listen(3000)
```

----------------------------------------

TITLE: Elysia Auth Feature: Controller, Service, Model
DESCRIPTION: Demonstrates a feature-based folder structure for ElysiaJS, separating concerns into controller (HTTP routing, validation), service (business logic), and model (data structures, validation). This example uses TypeScript and Elysia's built-in validation capabilities.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/best-practice.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// Controller handle HTTP related eg. routing, request validation
import { Elysia } from 'elysia'

import { Auth } from './service'
import { AuthModel } from './model'

export const auth = new Elysia({ prefix: '/auth' })
	.get(
		'/sign-in',
		({ body, cookie: { session } }) => {
			const response = await Auth.signIn(body)

			// Set session cookie
			session.value = response.token

			return response
		},
		{
			body: AuthModel.signInBody,
			response: {
				200: AuthModel.signInResponse,
				400: AuthModel.signInInvalid
			}
		}
	)

```

LANGUAGE: typescript
CODE:
```
// Service handle business logic, decoupled from Elysia controller
import { status } from 'elysia'

import type { AuthModel } from './model'

// If the class doesn't need to store a property,
// you may use `abstract class` to avoid class allocation
abstract class Auth {
	static async signIn({ username, password }: AuthModel.SignIn) {
		const user = await sql`
			SELECT password
			FROM users
			WHERE username = ${username}
			LIMIT 1`

		if (await Bun.password.verify(password, user.password))
			// You can throw an HTTP error directly
			throw status(
				400,
				'Invalid username or password' satisfies AuthModel.SignInInvalid
			)

		return {
			username,
			token: await generateAndSaveTokenToDB(user.id)
		}
	}
}

```

LANGUAGE: typescript
CODE:
```
// Model define the data structure and validation for the request and response
import { t } from 'elysia'

export namespace AuthModel {
	// Define a DTO for Elysia validation
	export const signInBody = t.Object({
		username: t.String(),
		password: t.String(),
	})

	// Define it as TypeScript type
	export type signInBody = typeof signIn.static

	// Repeat for other models
	export const signInResponse = t.Object({
		username: t.String(),
		token: t.String(),
	})

	export type signInResponse = typeof signIn.static

	export const signInInvalid = t.Literal('Invalid username or password')
	export type signInInvalid = typeof signInInvalid.static
}

```

----------------------------------------

TITLE: Elysia: Lazy Loading Module with Async Plugin (TypeScript)
DESCRIPTION: Elysia 0.2 introduces support for lazy loading modules and async plugins, allowing for deferred plugin registration. This feature optimizes server start-up times, particularly in Serverless/Edge environments, by enabling plugins to be applied incrementally after the server has started. Plugins can be marked as async, and modules can be lazily loaded using the `import()` statement within `app.use()`.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-02.md#_snippet_0

LANGUAGE: typescript
CODE:
```
const plugin = async (app: Elysia) => {
    const stuff = await doSomeHeavyWork()

    return app.get('/heavy', stuff)
}

app.use(plugin)
```

LANGUAGE: typescript
CODE:
```
app.use(import('./some-heavy-module'))
```

----------------------------------------

TITLE: Mount Hono Fetch Handler
DESCRIPTION: Demonstrates how to mount a WinterCG-compliant framework's fetch handler (like Hono) into an Elysia application. This allows seamless integration of different web frameworks within a single server environment.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/mount.md#_snippet_0

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
    .get('/', () => 'Hello from Elysia')
    .mount('/hono', hono.fetch)
```

----------------------------------------

TITLE: User Service and Authentication
DESCRIPTION: Defines the user service with state management for users and sessions, including data models for sign-in and session cookies. It implements a `isSignIn` macro for authentication checks and provides methods for user registration and login.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_43

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

export const userService = new Elysia({ name: 'user/service' })
    .state({
        user: {} as Record<string, string>,
        session: {} as Record<number, string>
    })
    .model({
        signIn: t.Object({
            username: t.String({ minLength: 1 }),
            password: t.String({ minLength: 8 })
        }),
        session: t.Cookie(
            {
                token: t.Number()
            },
            {
                secrets: 'seia'
            }
        ),
        optionalSession: t.Cookie(
            {
                token: t.Optional(t.Number())
            },
            {
                secrets: 'seia'
            }
        )
    })
    .macro({
        isSignIn(enabled: boolean) {
            if (!enabled) return

            return {
                beforeHandle({
                    status,
                    cookie: { token },
                    store: { session }
                }) {
                    if (!token.value)
                        return status(401, {
                            success: false,
                            message: 'Unauthorized'
                        })

                    const username = session[token.value as unknown as number]

                    if (!username)
                        return status(401, {
                            success: false,
                            message: 'Unauthorized'
                        })
                }
            }
        }
    })

export const getUserId = new Elysia()
    .use(userService)
    .guard({
        isSignIn: true,
        cookie: 'session'
    })
    .resolve(({ store: { session }, cookie: { token } }) => ({
        username: session[token.value]
    }))
    .as('scoped')

export const user = new Elysia({ prefix: '/user' })
    .use(userService)
    .put(
        '/sign-up',
        async ({ body: { username, password }, store, status }) => {
            if (store.user[username])
                return status(400, {
                    success: false,
                    message: 'User already exists'
                })

            store.user[username] = await Bun.password.hash(password)

            return {
                success: true,
                message: 'User created'
            }
        },
        {
            body: 'signIn'
        }
    )
    .post(
        '/sign-in',
        async ({
            store: { user, session },
            status,
            body: { username, password },
            cookie: { token }
        }) => {
            if (
                !user[username] ||
                !(await Bun.password.verify(password, user[username]))
            )
                return status(400, {
                    success: false,
                    message: 'Invalid username or password'
                })

            const key = crypto.getRandomValues(new Uint32Array(1))[0]
            session[key] = username
            token.value = key

            return {
                success: true,
                message: `Signed in as ${username}`
            }
        },
        {
            body: 'signIn',
            cookie: 'optionalSession'
        }
    )
    .get(
        '/sign-out',
        ({ cookie: { token } }) => {
            token.remove()

            return {
                success: true,
                message: 'Signed out'
            }
        },
        {
            cookie: 'optionalSession'
        }
    )
    .use(getUserId)
    .get('/profile', ({ username }) => ({
        success: true,
        username
    }))

```

----------------------------------------

TITLE: Order of .onBeforeHandle Hooks
DESCRIPTION: Illustrates the importance of hook registration order. Hooks registered after a route are not applied to that route. This example shows that only the first .onBeforeHandle hook is executed.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
 	.onBeforeHandle(() => {
        console.log('1')
    })
	.get('/', () => 'hi')
    .onBeforeHandle(() => {
        console.log('2')
    })
    .listen(3000)
```

----------------------------------------

TITLE: Compile Elysia to Binary with Minify
DESCRIPTION: Compiles an ElysiaJS application to a binary using the `--minify` flag. This flag further reduces file size by minifying JavaScript syntax, but may interfere with tools like OpenTelemetry that rely on function names. Use this option if OpenTelemetry is not a concern.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/deploy.md#_snippet_2

LANGUAGE: bash
CODE:
```
bun build \
	--compile \
	--minify \
	--target bun \
	--outfile server \
	./src/index.ts
```

----------------------------------------

TITLE: Define a POST Route
DESCRIPTION: Adds a POST route to the Elysia application, demonstrating how to define different HTTP methods.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_5

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
    .get('/', () => 'Hello Elysia')
    .get('/hello', 'Do you miss me?') // [!code --]
    .post('/hello', 'Do you miss me?') // [!code ++]
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Static Code Analysis with Schema
DESCRIPTION: Demonstrates how Elysia's Static Code Analysis optimizes route handling by leveraging schema definitions. When a schema is provided for the body, Elysia can infer the expected content type (e.g., JSON) and pre-parse the body, significantly improving performance compared to dynamic checks. This example shows a POST request with a defined JSON body schema.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-05.md#_snippet_0

LANGUAGE: typescript
CODE:
```
app.post('/sign-in', ({ body }) => signIn(body), {
    schema: {
        body: t.Object({
            username: t.String(),
            password: t.String()
        })
    }
})
```

----------------------------------------

TITLE: Elysia User Service and Authentication
DESCRIPTION: Defines a user service with state management, request models for sign-in, and session cookies. Includes a macro for authentication checks and guards for protected routes.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_40

LANGUAGE: typescript
CODE:
```
// @errors: 2538
// @filename: user.ts
import { Elysia, t } from 'elysia'

export const userService = new Elysia({ name: 'user/service' })
    .state({
        user: {} as Record<string, string>,
        session: {} as Record<number, string>
    })
    .model({
        signIn: t.Object ({
            username: t.String ({ minLength: 1 }),
            password: t.String ({ minLength: 8 })
        }),
        session: t.Cookie (
            {
                token: t.Number ()
            },
            {
                secrets: 'seia'
            }
        ),
        optionalSession: t.Cookie (
            {
                token: t.Optional (t.Number ())
            },
            {
                secrets: 'seia'
            }
        )
    })
    .macro ({
        isSignIn(enabled: boolean) {
            if (!enabled) return

            return {
                beforeHandle({
                    status,
                    cookie: { token },
                    store: { session }
                }) {
                    if (!token.value)
                        return status(401, {
                            success: false,
                            message: 'Unauthorized'
                        })

                    const username = session[token.value as unknown as number]

                    if (!username)
                        return status(401, {
                            success: false,
                            message: 'Unauthorized'
                        })
                }
            }
        }
    })

export const getUserId = new Elysia()
    .use(userService)
    .guard ({
        isSignIn: true,
        cookie: 'session'
    })
    .resolve (({ store: { session }, cookie: { token } }) => ({
        username: session[token.value]
    }))
    .as('scoped')

export const user = new Elysia ({ prefix: '/user' })
    .use(userService)
    .put (
        '/sign-up',
        async ({ body: { username, password }, store, status }) => {
            if (store.user[username])
                return status(400, {
                    success: false,
                    message: 'User already exists'
                })

            store.user[username] = await Bun.password.hash(password)

            return {
                success: true,
                message: 'User created'
            }
        },
        {
            body: 'signIn'
        }
    )
    .post (
        '/sign-in',
        async ({
            store: { user, session },
            status,
            body: { username, password },
            cookie: { token }
        }) => {
            if (
                !user[username] ||
                !(await Bun.password.verify(password, user[username]))
            )
                return status(400, {
                    success: false,
                    message: 'Invalid username or password'
                })

            const key = crypto.getRandomValues(new Uint32Array(1))[0]
            session[key] = username
            token.value = key

            return {
                success: true,
                message: `Signed in as ${username}`
            }
        },
        {
            body: 'signIn',
            cookie: 'optionalSession'
        }
    )
    .get (
        '/sign-out',
        ({ cookie: { token } }) => {
            token.remove ()

            return {
                success: true,
                message: 'Signed out'
            }
        },
        {
            cookie: 'optionalSession'
        }
    )
    .use(getUserId)
    .get('/profile', ({ username }) => ({
        success: true,
        username
    }))

```

----------------------------------------

TITLE: ElysiaJS Macro Property Shorthand Example
DESCRIPTION: Demonstrates the property shorthand feature in ElysiaJS macros, where an object property can be defined to automatically create a function that executes based on a boolean parameter.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/macro.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

export const auth = new Elysia()
    .macro({
    	// This property shorthand
    	isAuth: {
      		resolve() {
     			return {
         			user: 'saltyaom'
          			}
      		}
        },
        // is equivalent to
        isAuth(enabled: boolean) {
        	if(!enabled) return

        	return {
				resolve() {
					return {
						user
					}
				}
         	}
        }
    })

```

----------------------------------------

TITLE: ElysiaJS AfterHandle Hook Example
DESCRIPTION: Demonstrates using the 'afterHandle' hook in Elysia.js to modify the response after the route handler has executed, such as setting the 'Content-Type' header based on the response content.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_23

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { isHtml } from '@elysiajs/html'

new Elysia()
    .get('/', () => '<h1>Hello World</h1>', {
        afterHandle({ response, set }) {
            if (isHtml(response))
                set.headers['content-type'] = 'text/html; charset=utf8'
        }
    })
    .get('/hi', () => '<h1>Hello World</h1>')
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Derived Context in Handlers
DESCRIPTION: Demonstrates using the 'derive' hook to add custom properties to the context. This example extracts a bearer token from the 'authorization' header and makes it available as 'bearer'.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/handler.md#_snippet_6

LANGUAGE: typescript
CODE:
```
const demo3 = new Elysia()
    .derive(({ headers }) => {
        const auth = headers['authorization']

        return {
            bearer: auth?.startsWith('Bearer ') ? auth.slice(7) : null
        }
    })
    .get('/', ({ bearer }) => bearer ?? '12345')
```

----------------------------------------

TITLE: ElysiaJS: Basic Route with Inline Model
DESCRIPTION: Demonstrates defining a POST route in ElysiaJS with inline TypeScript type definitions for the request and response bodies. This is a starting point before refactoring models for reusability.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_30

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

const app = new Elysia()
    .post('/sign-in', ({ body }) => body, {
        body: t.Object({
            username: t.String(),
            password: t.String()
        }),
        response: t.Object({
            username: t.String(),
            password: t.String()
        })
    })
```

----------------------------------------

TITLE: Module Import After Path Alias Correction
DESCRIPTION: Illustrates the module import statement after the `tsconfig.json` has been corrected for a monorepo structure. The import remains the same, but the underlying path resolution is now accurate for both frontend and backend.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_11

LANGUAGE: typescript
CODE:
```
// This should be able to resolve the same module both frontend and backend, and not `any`
import { a, b } from '@/controllers'
```

----------------------------------------

TITLE: Apply Swagger Plugin to Elysia Instance
DESCRIPTION: Applies the swagger plugin to an Elysia instance to enable OpenAPI schema generation and Swagger UI.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { swagger } from '@elysiajs/swagger'

const app = new Elysia()
    // Apply the swagger plugin
    .use(swagger())
    .get('/', ({ path }) => path)
    .post('/hello', 'Do you miss me?')
    .listen(3000)
```

----------------------------------------

TITLE: Enable Strict Mode in tsconfig.json
DESCRIPTION: Ensures type safety by enabling strict mode in your TypeScript configuration. This is a common requirement for robust type inference with libraries like Elysia and Eden.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  "compilerOptions": {
    "strict": true // [!code ++]
  }
}
```

----------------------------------------

TITLE: Elysia Cron Plugin Stop Job Example
DESCRIPTION: Shows how to stop a registered cron job ('heartbeat') programmatically by accessing it from the Elysia store. This allows for manual control over scheduled tasks.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/cron.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { cron } from '@elysiajs/cron'

const app = new Elysia()
	.use(
		cron({
			name: 'heartbeat',
			pattern: '*/1 * * * * *',
			run() {
				console.log('Heartbeat')
			}
		})
	)
	.get(
		'/stop',
		({ store: { cron: { heartbeat } } })
			=> {
			heartbeat.stop()

			return 'Stop heartbeat'
		}
	)
	.listen(3000)
```

----------------------------------------

TITLE: Use Eden Treaty in Nuxt app
DESCRIPTION: Consume the Elysia API from your Nuxt application using Eden Treaty. This example demonstrates fetching data from the '/hello' endpoint and displaying it in a component.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/nuxt.md#_snippet_3

LANGUAGE: vue
CODE:
```
<template>
    <div>
        <p>{{ data.message }}</p>
    </div>
</template>
<script setup lang="ts">
const { $api } = useNuxtApp()

const { data } = await useAsyncData(async () => {
    const { data, error } = await $api.hello.get()

    if (error)
        throw new Error('Failed to call API')

    return data
})
</script>
```

----------------------------------------

TITLE: ElysiaJS TypeScript: User Authentication (Sign-up & Sign-in)
DESCRIPTION: This snippet implements user authentication routes for sign-up and sign-in within an ElysiaJS application. It uses TypeScript, defines an in-memory store for users and sessions, handles password hashing using Bun.password, and manages user sessions via secure cookies.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_22

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

export const user = new Elysia({ prefix: '/user' })
    .state({
        user: {} as Record<string, string>,
        session: {} as Record<number, string>
    })
    .put(
        '/sign-up',
        async ({ body: { username, password }, store, status }) => {
            if (store.user[username])
                return status(400, {
                    success: false,
                    message: 'User already exists'
                })
            store.user[username] = await Bun.password.hash(password)
            return {
                success: true,
                message: 'User created'
            }
        },
        {
            body: t.Object({
                username: t.String({ minLength: 1 }),
                password: t.String({ minLength: 8 })
            })
        }
    )
    .post(
        '/sign-in',
        async ({ store: { user, session }, status, body: { username, password }, cookie: { token } }) => {
            if (
                !user[username] ||
                !(await Bun.password.verify(password, user[username]))
            )
                return status(400, {
                    success: false,
                    message: 'Invalid username or password'
                })

            const key = crypto.getRandomValues(new Uint32Array(1))[0]
            session[key] = username
            token.value = key

            return {
                success: true,
                message: `Signed in as ${username}`
            }
        },
        {
            body: t.Object({
                username: t.String({ minLength: 1 }),
                password: t.String({ minLength: 8 })
            }),
            cookie: t.Cookie(
                {
                    token: t.Number()
                },
                {
                    secrets: 'seia'
                }
            )
        }
    )
```

----------------------------------------

TITLE: ElysiaJS Resolve Hook Example
DESCRIPTION: Shows how to use the 'resolve' hook in Elysia.js to augment the context object with new properties after validation and before the route handler, such as extracting a bearer token from headers.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_19

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
    .guard(
        {
            headers: t.Object({
                authorization: t.TemplateLiteral('Bearer ${string}')
            })
        },
        (app) =>
            app
                .resolve(({ headers: { authorization } }) => {
                    return {
                        bearer: authorization.split(' ')[1]
                    }
                })
                .get('/', ({ bearer }) => bearer)
    )
    .listen(3000)
```

----------------------------------------

TITLE: ElysiaJS BeforeHandle Hook Example
DESCRIPTION: Demonstrates using the 'beforeHandle' hook in Elysia.js to perform actions before a route handler executes, such as validating a session and returning an unauthorized status if validation fails.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_17

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { validateSession } from './user'

new Elysia()
    .get('/', () => 'hi', {
        beforeHandle({ set, cookie: { session }, status }) {
            if (!validateSession(session.value)) return status(401)
        }
    })
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Transform Hook Example
DESCRIPTION: Shows how to use the `transform` hook to mutate request context before validation, such as converting URL parameters to their correct types. It modifies the `params` object in place.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_14

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
    .get('/id/:id', ({ params: { id } }) => id, {
        params: t.Object({
            id: t.Number()
        }),
        transform({ params }) {
            const id = +params.id

            if (!Number.isNaN(id)) params.id = id
        }
    })
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Testing with handle()
DESCRIPTION: Demonstrates how to test Elysia controllers by directly invoking the application instance's `handle` method with a mock Request.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/best-practice.md#_snippet_5

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { Service } from './service'

import { describe, it, expect } from 'bun:test'

const app = new Elysia()
    .get('/', ({ stuff }) => {
        Service.doStuff(stuff)

        return 'ok'
    })

describe('Controller', () => {
	it('should work', async () => {
		const response = await app
			.handle(new Request('http://localhost/'))
			.then((x) => x.text())

		expect(response).toBe('ok')
	})
})
```

----------------------------------------

TITLE: Server-Sent Event Endpoint Example
DESCRIPTION: Creates a Server-Sent Event (SSE) endpoint using the manual callback mode of the Stream constructor. It sends messages periodically and closes the stream after a set duration.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/stream.md#_snippet_3

LANGUAGE: typescript
CODE:
```
new Elysia()
    .get('/source', () =>
        new Stream((stream) => {
            const interval = setInterval(() => {
                stream.send('hello world')
            }, 500)

            setTimeout(() => {
                clearInterval(interval)
                stream.close()
            }, 3000)
        })
    )
```

----------------------------------------

TITLE: Elysia Main Instance with Instrumentation
DESCRIPTION: Shows how to apply a pre-configured instrumentation plugin (created in a separate file) to the main Elysia instance. This is part of the strategy to ensure OpenTelemetry SDK is ready before instrumented modules are loaded.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/opentelemetry.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import {
	Elysia
} from 'elysia'
import {
	instrumentation
} from './instrumentation.ts'

new Elysia().use(instrumentation).listen(3000)
```

----------------------------------------

TITLE: Mount Multiple Elysia Instances
DESCRIPTION: Shows how to mount multiple existing Elysia projects (instances) into a single server. When an Elysia instance is passed to `.mount`, it's automatically resolved using `.use`, preserving type-safety and Eden support.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/mount.md#_snippet_2

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

import A from 'project-a/elysia'
import B from 'project-b/elysia'
import C from 'project-c/elysia'

new Elysia()
    .mount(A)
    .mount(B)
    .mount(C)
```

----------------------------------------

TITLE: Set JWT Expiration Date Example
DESCRIPTION: Demonstrates how to configure the Elysia JWT plugin with a specific expiration time and use the `jwt.sign` method to create a token. The expiration is set to 7 days.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/jwt.md#_snippet_6

LANGUAGE: typescript
CODE:
```
const app = new Elysia()
    .use(
        jwt({
            name: 'jwt',
            secret: 'kunikuzushi',
            exp: '7d'
        })
    )
    .get('/sign/:name', async ({ jwt, params }) => jwt.sign(params))

// This will sign JWT with an expiration date of the next 7 days.
```

----------------------------------------

TITLE: Elysia Cron Plugin Basic Usage
DESCRIPTION: Example of integrating the ElysiaJS Cron plugin to run a job named 'heartbeat' every 10 seconds. The job executes a callback function when triggered.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/cron.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { cron } from '@elysiajs/cron'

new Elysia()
	.use(
		cron({
			name: 'heartbeat',
			pattern: '*/10 * * * * *',
			run() {
				console.log('Heartbeat')
			}
		})
	)
	.listen(3000)
```

----------------------------------------

TITLE: Server Timing Plugin Configuration Options
DESCRIPTION: Details the configuration options available for the Server Timing plugin. These options allow customization of when and how performance data is collected and reported.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/server-timing.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
serverTiming(options?: ServerTimingOptions)

ServerTimingOptions:
  enabled: boolean | undefined
    @default `NODE_ENV !== 'production'`
    Determine whether or not Server Timing should be enabled.

  allow: ((context: ServerTimingContext) => boolean) | undefined
    @default `undefined`
    A condition whether server timing should be logged. The context includes the request object.

  trace: {
    request?: boolean,
    parse?: boolean,
    transform?: boolean,
    beforeHandle?: boolean,
    handle?: boolean,
    afterHandle?: boolean,
    total?: boolean
  } | undefined
    @default `undefined`
    Allow Server Timing to log specified life-cycle events. Accepts an object with boolean flags for each event.
```

----------------------------------------

TITLE: Run Compiled JavaScript
DESCRIPTION: Executes the bundled ElysiaJS JavaScript file. It's recommended to set the NODE_ENV to 'production' for optimal performance and behavior.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/deploy.md#_snippet_5

LANGUAGE: bash
CODE:
```
NODE_ENV=production bun ./dist/index.js
```

----------------------------------------

TITLE: ElysiaJS: Components and Plugin Usage (TypeScript)
DESCRIPTION: Demonstrates how ElysiaJS treats every instance as a component that can be plugged into others. This modular approach allows for breaking down applications into manageable pieces, facilitating feature addition or removal.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/key-concept.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const store = new Elysia()
	.state({ visitor: 0 })

const router = new Elysia()
	.use(store)
	.get('/increase', ({ store }) => store.visitor++)

const app = new Elysia()
	.use(router)
	.get('/', ({ store }) => store)
	.listen(3000)
```

----------------------------------------

TITLE: onRequest Hook for Rate Limiting
DESCRIPTION: Example of using the onRequest hook for request-level logic like rate limiting. If a value is returned from onRequest, it becomes the response, skipping subsequent lifecycle events.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

// Assume rateLimiter is a plugin with a check method
// const rateLimiter = new Elysia().decorate('rateLimiter', { check: (ip) => false })

new Elysia()
    .use(rateLimiter)
    .onRequest(({ rateLimiter, ip, set, status }) => {
        if (rateLimiter.check(ip)) return status(420, 'Enhance your calm')
    })
    .get('/', () => 'hi')
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Do: Use Elysia Instance as Controller
DESCRIPTION: Presents the recommended Elysia.js pattern of treating the Elysia instance itself as the controller, simplifying type management and adhering to framework design.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/best-practice.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { Service } from './service'

new Elysia()
    .get('/', ({ stuff }) => {
        Service.doStuff(stuff)
    })
```

----------------------------------------

TITLE: Configure Database URL
DESCRIPTION: Sets the DATABASE_URL environment variable in the project's .env file. This URL specifies the connection details for the PostgreSQL database, including user, password, host, port, and database name.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_5

LANGUAGE: env
CODE:
```
DATABASE_URL="postgresql://postgres:12345678@localhost:5432/db?schema=public"
```

----------------------------------------

TITLE: Exact Mirror Performance Comparison
DESCRIPTION: Details the performance benefits of Exact Mirror, a replacement for TypeBox's Value.Clean, showing significant speed improvements for small, medium, and large objects. It leverages ahead-of-time compilation for enhanced efficiency.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-13.md#_snippet_0

LANGUAGE: text
CODE:
```
Exact Mirror is a drop-in replacement for TypeBox's Value.Clean with significant performance improvements by leveraging ahead-of-time compilation.

For small objects without arrays. We measured up to ~500x faster for the same object.

And for medium and large-size objects. We measured up to ~30x faster.
```

----------------------------------------

TITLE: ElysiaJS Validation Properties
DESCRIPTION: Lists the available properties for defining validation schemas in ElysiaJS, including params, query, body, headers, cookie, and response. All share a consistent syntax.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
Elysia Validation Schemas:
  Description: Defines runtime validation and TypeScript type inference for request and response properties.
  Syntax: Uses `t` object from Elysia for schema definition.

  Supported Properties:
    - params: Validates path parameters.
      Example: `params: t.Object({ id: t.Number() })`
    - query: Validates URL query string parameters.
      Example: `query: t.Object({ search: t.String() })`
    - body: Validates the request body.
      Example: `body: t.Object({ name: t.String(), age: t.Number() })`
    - headers: Validates request headers.
      Example: `headers: t.Object({ 'x-api-key': t.String() })`
    - cookie: Validates cookies.
      Example: `cookie: t.Object({ session_id: t.String() })`
    - response: Defines and validates the response body structure.
      Example: `response: { 200: t.Object({ message: t.String() }) }`

  Benefits:
    - Runtime validation.
    - TypeScript type inference for auto-completion and compile-time checks.
    - Single Source of Truth for API contracts.
```

----------------------------------------

TITLE: ElysiaJS: Explicitly return form for formdata
DESCRIPTION: Starting from version 1.2, you must now explicitly return 'form' when the response is formdata. Previously, the framework would automatically detect this if a file was present in a 1-level deep object.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-12.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { Elysia, form, file } from 'elysia'

new Elysia()
	.post('/', ({ file }) => ({ // [!code --]
	.post('/', ({ file }) => form({ // [!code ++]
		a: file('./public/kyuukurarin.mp4')
	}))
```

----------------------------------------

TITLE: Use Bearer Plugin in Elysia App
DESCRIPTION: Example of integrating the Bearer plugin into an ElysiaJS application. It demonstrates how to use the plugin to retrieve a Bearer token from the request and includes logic for handling unauthorized access.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/bearer.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import {
    Elysia
} from 'elysia'
import {
    bearer
} from '@elysiajs/bearer'

const app = new Elysia()
    .use(bearer())
    .get('/sign', ({ bearer }) => bearer, {
        beforeHandle({ bearer, set, status }) {
            if (!bearer) {
                set.headers[
                    'WWW-Authenticate'
                ] = `Bearer realm='sign', error="invalid_request"`

                return status(400, 'Unauthorized')
            }
        }
    })
    .listen(3000)
```

----------------------------------------

TITLE: GraphQL Yoga Configuration Options
DESCRIPTION: Details configuration options for the GraphQL Yoga plugin in ElysiaJS, extending GraphQL Yoga's createYoga options.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/graphql-yoga.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
GraphQL Yoga Plugin Configuration:

This plugin extends GraphQL Yoga's createYoga options. Please refer to the GraphQL Yoga documentation for a comprehensive list of options: https://the-guild.dev/graphql/yoga-server/docs

Key configuration options accepted by the Elysia plugin:

path: string
  @default `/graphql`
  Description: The endpoint path where the GraphQL handler will be exposed on the Elysia server.
  Example:
    yoga({
      path: '/my-graphql'
    })

typeDefs: string | string[] | DocumentNode | DocumentNode[]
  Description: GraphQL schema definition language (SDL) or AST.

resolvers: ResolversMap
  Description: An object mapping GraphQL types to resolver functions.

context?: object | ((req: ElysiaContext) => object)
  Description: Custom context object or a function that returns a context object for resolvers. Allows passing request-specific data to resolvers.
  Example:
    yoga({
      context: {
        user: 'admin'
      },
      resolvers: {
        Query: {
          hello: (_, __, context) => `Hello, ${context.user}`
        }
      }
    })

useContext: (context: any) => void
  Description: A utility function to help infer context types. It does not affect the runtime context value.

Other options are passed directly to GraphQL Yoga's createYoga function.
```

----------------------------------------

TITLE: Elysia.js Route Grouping with Prefix
DESCRIPTION: Refactors the previous Elysia.js CRUD example by applying a common '/note' prefix to all routes. This simplifies route definitions by removing the repeated '/note' segment from each individual route handler.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_19

LANGUAGE: typescript
CODE:
```
export const note = new Elysia({ prefix: '/note' })
    .decorate('note', new Note())
    .get('/', ({ note }) => note.data)
    .put('/', ({ note, body: { data } }) => note.add(data), {
        body: t.Object({
            data: t.String()
        })
    })
    .get(
        '/:index',
        ({ note, params: { index }, status }) => {
            return note.data[index] ?? status(404, 'Not Found :(')
        },
        {
            params: t.Object({
                index: t.Number()
            })
        }
    )
    .delete(
        '/:index',
        ({ note, params: { index }, status }) => {
            if (index in note.data) return note.remove(index)

            return status(422)
        },
        {
            params: t.Object({
                index: t.Number()
            })
        }
    )
    .patch(
        '/:index',
        ({ note, params: { index }, body: { data }, status }) => {
            if (index in note.data) return note.update(index, data)

            return status(422)
        },
        {
            params: t.Object({
                index: t.Number()
            }),
            body: t.Object({
                data: t.String()
            })
        }
    )
```

----------------------------------------

TITLE: Elysia Testing with Vitest
DESCRIPTION: Demonstrates testing Elysia applications with Vitest, leveraging its compatibility with Web Standard APIs. The `app.handle` method is used to process requests.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_23

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'
import { describe, it, expect } from 'vitest'

const app = new Elysia()
	.get('/', 'Hello World')

describe('GET /', () => {
	it('should return Hello World', async () => {
		const res = await app.handle(
			new Request('http://localhost')
		)

		expect(res.status).toBe(200)
		expect(await res.text()).toBe('Hello World')
	})
})

```

----------------------------------------

TITLE: ElysiaJS onError: Custom Error Handling
DESCRIPTION: Shows how to implement custom error handling in Elysia.js using the `onError` hook. This example catches thrown errors and returns a custom error message response.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_26

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .onError(({ code, error }) => {
        return new Response(error.toString())
    })
    .get('/', () => {
        throw new Error('Server is during maintenance')

        return 'unreachable'
    })
```

----------------------------------------

TITLE: ElysiaJS Importing User Module
DESCRIPTION: Shows how to import and integrate a custom ElysiaJS module (e.g., 'user') into the main application file ('index.ts') using the .use() method.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_31

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'
import { swagger } from '@elysiajs/swagger'

import { note } from './note'
import { user } from './user'

const app = new Elysia()
    .use(swagger())
    .use(user)
    .use(note)
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Eden Client Usage
DESCRIPTION: Demonstrates using Elysia's Eden client library (`@elysiajs/eden`) to interact with an Elysia server. It shows how to fetch data from a typed endpoint, synchronizing types automatically without manual code generation.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/at-glance.md#_snippet_5

LANGUAGE: typescript
CODE:
```
// @filename: client.ts
// ---cut---
// client.ts
import { treaty } from '@elysiajs/eden'
import type { App } from './server'

const app = treaty<App>('localhost:3000')

// Get data from /user/617
const { data } = await app.user({ id: 617 }).get()
      // ^?

console.log(data)
```

----------------------------------------

TITLE: Elysia Derive Hook Example
DESCRIPTION: Illustrates using the `derive` hook to add new properties to the request context based on request-specific data like headers. The derived properties are available during request processing.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_15

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .derive(({ headers }) => {
        const auth = headers['Authorization']

        return {
            bearer: auth?.startsWith('Bearer ') ? auth.slice(7) : null
        }
    })
    .get('/', ({ bearer }) => bearer)
```

----------------------------------------

TITLE: Elysia State Mutation Lost Reference Example
DESCRIPTION: Demonstrates a common pitfall where assigning a primitive state value to a new variable breaks the reference. Subsequent modifications to the new variable do not affect the original state.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/handler.md#_snippet_39

LANGUAGE: typescript
CODE:
```
const store = {
    counter: 0
}

let counter = store.counter

counter++
console.log(store.counter) // ❌ 0
console.log(counter) // ✅ 1
```

----------------------------------------

TITLE: Elysia State Mutation Reference Example
DESCRIPTION: Illustrates the correct way to mutate state in Elysia by directly accessing and modifying properties via the `store` object. This preserves the reference and ensures changes are reflected globally.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/handler.md#_snippet_38

LANGUAGE: typescript
CODE:
```
const store = {
    counter: 0
}

store.counter++
console.log(store.counter) // ✅ 1
```

----------------------------------------

TITLE: Elysia Unit Test with bun:test
DESCRIPTION: Demonstrates creating a unit test for an Elysia server using Bun's built-in test runner. It utilizes the `Elysia.handle` method to simulate a request and assert the response.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/unit-test.md#_snippet_0

LANGUAGE: typescript
CODE:
```
// test/index.test.ts
import { describe, expect, it } from 'bun:test'
import { Elysia } from 'elysia'

describe('Elysia', () => {
    it('returns a response', async () => {
        const app = new Elysia().get('/', () => 'hi')

        const response = await app
            .handle(new Request('http://localhost/'))
            .then((res) => res.text())

        expect(response).toBe('hi')
    })
})
```

----------------------------------------

TITLE: Elysia OpenTelemetry Integration
DESCRIPTION: Integrates the `@elysiajs/opentelemetry` plugin to enable automatic tracing of requests and lifecycle hooks. Requires an OpenTelemetry collector or Jaeger to be running.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_37

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'
import { opentelemetry } from '@elysiajs/opentelemetry' // [!code ++]
import { swagger } from '@elysiajs/swagger'

import { note } from './note'
import { user } from './user'

const app = new Elysia()
    .use(opentelemetry()) // [!code ++]
    .use(swagger())
    .onError(({ error, code }) => {
        if (code === 'NOT_FOUND') return 'Not Found :('

        console.error(error)
    })
    .use(note)
    .use(user)
    .listen(3000)
```

----------------------------------------

TITLE: Define Routes with Different HTTP Methods
DESCRIPTION: Illustrates defining routes using different HTTP methods (GET, POST) for both distinct and identical paths. This covers handling various request types to the same or different endpoints.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/route.md#_snippet_1

LANGUAGE: typescript
CODE:
```
const demo2 = new Elysia()
    .get('/', () => 'hello')
    .post('/hi', () => 'hi')
```

LANGUAGE: typescript
CODE:
```
const demo4 = new Elysia()
    .get('/', () => 'hi')
    .post('/', () => 'hi')
```

----------------------------------------

TITLE: Elysia Basic Routes and WebSocket (TypeScript)
DESCRIPTION: A collection of basic Elysia features including simple string responses, serving files, generator functions for streaming, and WebSocket communication.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/index.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { Elysia, file } from 'elysia'

new Elysia()
	.get('/', 'Hello World')
	.get('/image', file('mika.webp'))
	.get('/stream', function* () {
		yield 'Hello'
		yield 'World'
	})
	.ws('/realtime', {
		message(ws, message) {
			ws.send('got:' + message)
		}
	})
	.listen(3000)
```

----------------------------------------

TITLE: Supabase Authentication Methods
DESCRIPTION: Demonstrates common authentication methods provided by the Supabase JavaScript client. These methods handle user sign-up and sign-in processes, abstracting away complex backend logic.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-supabase.md#_snippet_0

LANGUAGE: ts
CODE:
```
supabase.auth.signUp(body)
supabase.auth.signInWithPassword(body)
```

----------------------------------------

TITLE: Fastify Side-effect Duplication Example
DESCRIPTION: Shows a scenario in Fastify where adding the same hook to both the main app and a registered plugin can lead to duplicated side-effects. This highlights the lack of explicit control over side-effect propagation compared to Elysia.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_15

LANGUAGE: ts
CODE:
```
import fastify from 'fastify'
import type {
	FastifyRequest,
	FastifyReply,
	FastifyPluginCallback
} from 'fastify'

const log = (request: FastifyRequest, reply: FastifyReply, done: Function) => {
	console.log('Middleware executed')

	done()
}

const app = fastify()

app.addHook('onRequest', log)
app.get('/main', (request, reply) => {
	reply.send('Hello from main!')
})

const subRouter: FastifyPluginCallback = (app, opts, done) => {
	app.addHook('onRequest', log)

	// This would log twice
	app.get('/sub', (request, reply) => {
		return reply.send('Hello from sub router!')
	})

	done()
}

app.register(subRouter, {
	prefix: '/sub'
})

app.listen({ port: 3000 })
```

----------------------------------------

TITLE: Subrouter Implementation: Elysia vs Hono
DESCRIPTION: Demonstrates how to use instances as subrouters in Hono and Elysia. Hono requires an explicit prefix to separate the subrouter, while Elysia uses an optional prefix in the constructor for defining one.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { Hono } from 'hono'

const subRouter = new Hono()

subRouter.get('/user', (c) => {
	return c.text('Hello User')
})

const app = new Hono()

app.route('/api', subRouter)
```

LANGUAGE: TypeScript
CODE:
```
import { Elysia } from 'elysia'

const subRouter = new Elysia({ prefix: '/api' })
	s.get('/user', 'Hello User')

const app = new Elysia()
	.use(subRouter)
```

----------------------------------------

TITLE: Express Middleware Registration and Side-effects
DESCRIPTION: Demonstrates how Express.js registers middleware globally and the challenges in managing side-effects, often requiring prefixes to separate functionality. This example shows a sub-router with a middleware that checks for authorization headers.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-express.md#_snippet_12

LANGUAGE: ts
CODE:
```
import express from 'express'

const app = express()

app.get('/', (req, res) => {
	res.send('Hello World')
})

const subRouter = express.Router()

subRouter.use((req, res, next) => {
	const token = req.headers.authorization

	if (!token)
		return res.status(401).send('Unauthorized')

	next()
})

app.use(subRouter)

// has side-effect from subRouter
app.get('/side-effect', (req, res) => {
	res.send('hi')
})
```

----------------------------------------

TITLE: Elysia Custom Body Parser
DESCRIPTION: Demonstrates how to implement a custom body parser in Elysia.js. This allows handling specific content types by defining custom parsing logic within the 'onParse' hook.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_13

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .onParse(({ request, contentType }) => {
        if (contentType === 'application/custom-type')
            return request.text()
    })
```

----------------------------------------

TITLE: Elysia WebSocket API
DESCRIPTION: Documentation for Elysia's WebSocket API, including the `ws` method for creating handlers, `WebSocketHandler` options, lifecycle callbacks, and configuration parameters.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/websocket.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
.ws(endpoint: path, options: Partial<WebSocketHandler<Context>>): this
  - Creates a websocket handler for the specified endpoint.
  - endpoint: A path string exposed as the websocket handler.
  - options: An object to customize WebSocket handler behavior.

WebSocketHandler Options:
  - open(ws: ServerWebSocket<{ id: string, data: Context }>): this
    - Callback function executed when a new WebSocket connection is established.
    - ws: The WebSocket server instance for the connection.
  - message(ws: ServerWebSocket<{ id: string, data: Context }>, message: Message): this
    - Callback function executed when an incoming message is received.
    - ws: The WebSocket server instance for the connection.
    - message: The received message, typed based on `schema.message` (defaults to string).
  - close(ws: ServerWebSocket<{ id: string, data: Context }>): this
    - Callback function executed when a WebSocket connection is closed.
    - ws: The WebSocket server instance for the connection.
  - body: Schema for validating the incoming message payload.
  - query: Schema for validating URL query parameters.
  - params: Schema for validating path parameters.
  - header: Schema for validating request headers.
  - cookie: Schema for validating request cookies.
  - response: Schema for validating the value returned from the handler.

Elysia Constructor WebSocket Configuration:
  - websocket: Object
    - perMessageDeflate: boolean (default: false)
      - Enable compression for clients that support it.
    - maxPayloadLength: number
      - The maximum size of a message in bytes.
    - idleTimeout: number (default: 120)
      - The number of seconds after which an idle connection will be closed.
    - backpressureLimit: number (default: 16777216)
      - The maximum number of bytes that can be buffered for a single connection.
    - closeOnBackpressureLimit: boolean (default: false)
      - Close the connection if the backpressure limit is reached.
```

----------------------------------------

TITLE: Fetch API Request with Path Parameters
DESCRIPTION: Shows a basic example of making a `fetch` request with path parameters embedded directly in the URL. This demonstrates how client-side requests send path data that Elysia.js can then parse and validate.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_15

LANGUAGE: typescript
CODE:
```
fetch('https://elysiajs.com/id/1')
```

----------------------------------------

TITLE: Run Integration Tests with Bun (Bash)
DESCRIPTION: Provides the command to execute the integration tests defined in the project. This command utilizes Bun's built-in test runner to discover and run all test files, typically located in a 'test' directory.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/test.md#_snippet_1

LANGUAGE: bash
CODE:
```
bun test
```

----------------------------------------

TITLE: ElysiaJS Guard: Apply Query Schema to Handlers
DESCRIPTION: Illustrates the use of the `guard` middleware in ElysiaJS to apply a schema to multiple subsequent handlers. This example shows how to enforce a required query parameter for all routes defined after the guard.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
    .get('/none', ({ query }) => 'hi')
    .guard({
        query: t.Object({
            name: t.String()
        })
    })
    .get('/query', ({ query }) => query)
    .listen(3000)
```

----------------------------------------

TITLE: ElysiaJS Type Inference Example
DESCRIPTION: Demonstrates how ElysiaJS, using TypeBox, allows inferring TypeScript types directly from schema definitions. This reduces the need for duplicate type declarations, making the schema the single source of truth.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import { t } from 'elysia'

const MyType = t.Object({
	hello: t.Literal('Elysia')
})

type MyType = typeof MyType.static
```

----------------------------------------

TITLE: Elysia Lifecycle Event Order Output
DESCRIPTION: Shows the expected console output when demonstrating the order of lifecycle event registration in Elysia. Only the 'before handle' event registered before the route is executed.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/key-concept.md#_snippet_6

LANGUAGE: bash
CODE:
```
1
```

----------------------------------------

TITLE: Use Static Plugin in Elysia
DESCRIPTION: Demonstrates basic usage of the static plugin within an Elysia server, serving files from the default 'public' directory.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/static.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import {
    Elysia
} from 'elysia'
import {
    staticPlugin
} from '@elysiajs/static'

new Elysia()
    .use(staticPlugin())
    .listen(3000)
```

----------------------------------------

TITLE: ElysiaJS: Global Cookie Configuration
DESCRIPTION: Shows how to configure cookie secrets and signing globally using the Elysia constructor. This applies the specified secrets and signing rules to all routes unless overridden, simplifying setup for consistent security.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/cookie.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia({
    cookie: {
        secrets: 'Fischl von Luftschloss Narfidort',
        sign: ['profile']
    }
})
    .get('/', ({ cookie: { profile } }) => {
        profile.value = {
            id: 617,
            name: 'Summoning 101'
        }
    }, {
        cookie: t.Cookie({
            profile: t.Object({
                id: t.Numeric(),
                name: t.String()
            })
        })
    })
```

----------------------------------------

TITLE: Elysia OpenAPI/Swagger Integration
DESCRIPTION: Shows how to integrate the `@elysiajs/swagger` plugin with Elysia. This allows for automatic generation of OpenAPI documentation and seamless integration with Swagger UI, simplifying API documentation sharing.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/at-glance.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'
import { swagger } from '@elysiajs/swagger'

new Elysia()
    .use(swagger())
    .get('/user/:id', ({ params: { id } }) => id, {
        params: t.Object({
            id: t.Number()
        })
    })
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Client with Treaty
DESCRIPTION: Shows how to use the `@elysiajs/eden` treaty client to interact with an Elysia server. It demonstrates making a PATCH request to '/user/profile' and handling potential error responses (400, 418) and successful data retrieval.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/midori.md#_snippet_4

LANGUAGE: typescript
CODE:
```
// @filename: server.ts
import { Elysia, t } from 'elysia'

const app = new Elysia()
    .patch(
        '/user/profile',
        ({ body, status }) => {
            if(body.age < 18)
                return status(400, "Oh no")

            if(body.name === 'Nagisa')
                return status(418)

            return body
        },
        {
            body: t.Object({
                name: t.String(),
                age: t.Number()
            })
        }
    )
    .listen(80)

export type App = typeof app

// @filename: client.ts
// ---cut---
// client.ts
import { treaty } from '@elysiajs/eden'
import type { App } from './server'

const api = treaty<App>('localhost')

const { data, error } = await api.user.profile.patch({
    name: 'saltyaom',
    age: '21'
})

if(error)
    switch(error.status) {
        case 400:
            throw error.value
//                         ^?

        case 418:
            throw error.value
//                         ^?
}

data
// ^?

```

----------------------------------------

TITLE: Elysia Optimized Static Content Serving
DESCRIPTION: Shows an optimized method for serving static content in Elysia by directly returning a `Bun.file` object as the handler. This allows Elysia to compile the response ahead of time, leading to performance improvements.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-08.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/', Bun.file('video/kyuukurarin.mp4'))
    .listen(3000)
```

----------------------------------------

TITLE: Elysia: End-to-End Type Safety with Schema Validation
DESCRIPTION: Showcases Elysia's built-in end-to-end type safety using Eden and schema validation with `t.Object`. This example tests a POST endpoint that mirrors the request body.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_21

LANGUAGE: ts
CODE:
```
import { Elysia, t } from 'elysia'
import { treaty } from '@elysiajs/eden'

const app = new Elysia()
	.post('/mirror', ({ body }) => body, {
		body: t.Object({
			message: t.String()
		})
	})

const api = treaty(app)

const { data, error } = await api.mirror.post({
	message: 'Hello World'
})

if(error)
	throw error

















console.log(data)







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































```

----------------------------------------

TITLE: Send Email with Sendgrid using ElysiaJS
DESCRIPTION: Provides an example of sending emails through Sendgrid from an ElysiaJS application. It uses React for email templating and the Sendgrid Node.js library. Requires Sendgrid API key and the `@sendgrid/mail` package.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/react-email.md#_snippet_7

LANGUAGE: tsx
CODE:
```
import { Elysia, t } from 'elysia'

import OTPEmail from './emails/otp'

import sendgrid from "@sendgrid/mail"

sendgrid.setApiKey(process.env.SENDGRID_API_KEY)

new Elysia()
	.get('/otp', ({ body }) => {
		// Random between 100,000 and 999,999
  		const otp = ~~(Math.random() * (900_000 - 1)) + 100_000

    	const html = renderToStaticMarkup(<OTPEmail otp={otp} />)

        await sendgrid.send({
        	from: 'ibuki@gehenna.sh',
           	to: body,
           	subject: 'Verify your email address',
            html
        })

        return { success: true }
	}, {
		body: t.String({ format: 'email' })
	})
	.listen(3000)
```

----------------------------------------

TITLE: Elysia User Service and Authentication
DESCRIPTION: Defines a user service for Elysia.js, including state management for user and session data, data models for sign-in and cookies, and a custom macro for authentication checks.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_46

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

export const userService = new Elysia({ name: 'user/service' })
    .state({
        user: {} as Record<string, string>,
        session: {} as Record<number, string>
    })
    .model({
        signIn: t.Object({
            username: t.String({ minLength: 1 }),
            password: t.String({ minLength: 8 })
        }),
        session: t.Cookie(
            {
                token: t.Number()
            },
            {
                secrets: 'seia'
            }
        ),
        optionalSession: t.Cookie(
            {
                token: t.Optional(t.Number())
            },
            {
                secrets: 'seia'
            }
        )
    })
    .macro({
        isSignIn(enabled: boolean) {
            if (!enabled) return

            return {
                beforeHandle({
                    status,
                    cookie: { token },
                    store: { session }
                }) {
                    if (!token.value)
                        return status(401, {
                            success: false,
                            message: 'Unauthorized'
                        })

                    const username = session[token.value as unknown as number]

                    if (!username)
                        return status(401, {
                            success: false,
                            message: 'Unauthorized'
                        })
                }
            }
        }
    })
```

----------------------------------------

TITLE: Hono Global Error Handling
DESCRIPTION: Shows Hono's method for handling errors across all routes using a single `onError` function. This example defines a custom error class and how it's caught by the global handler.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-hono.md#_snippet_11

LANGUAGE: ts
CODE:
```
import { Hono } from 'hono'

const app = new Hono()

class CustomError extends Error {
	constructor(message: string) {
		super(message)
		this.name = 'CustomError'
	}
}

// global error handler
app.onError((error, c) => {
	if(error instanceof CustomError) {
		c.status(500)

		return c.json({
			message: 'Something went wrong!',
			error
		})
	}
})

// route-specific error handler
app.get('/error', (req, res) => {
	throw new CustomError('oh uh')
})
```

----------------------------------------

TITLE: Type Refinement with Drizzle TypeBox (TypeScript)
DESCRIPTION: Illustrates how to refine table schemas using `createInsertSchema` and `createSelectSchema` from Drizzle TypeBox. This example adds a specific `format: 'email'` constraint to the `user.email` field, which is then used by the `spreads` utility.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/drizzle.md#_snippet_9

LANGUAGE: ts
CODE:
```
import { t } from 'elysia'
import { createInsertSchema, createSelectSchema } from 'drizzle-typebox'

import { table } from './schema'
import { spreads } from './utils'

export const db = {
	insert: spreads({
		user: createInsertSchema(table.user, {
			email: t.String({ format: 'email' })
		}),
	}, 'insert')),
	select: spreads({
		user: createSelectSchema(table.user, {
			email: t.String({ format: 'email' })
		})
	}, 'select')
} as const
```

----------------------------------------

TITLE: Schema Validation with t - ElysiaJS
DESCRIPTION: Shows how to enforce data types for request bodies using Elysia's type system (`t`). It defines a schema for a POST request body, expecting a username and password string.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/cheat-sheet.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
    .post('/mirror', ({ body: { username } }) => username, {
        body: t.Object({
            username: t.String(),
            password: t.String()
        })
    })
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Instance: Lifting Global Hooks with as('global')
DESCRIPTION: Demonstrates using `instance.as('global')` to lift hook scopes to the global context. This allows applying hooks like `onBeforeHandle` globally without needing to specify `as: 'global'` on each individual hook or guard.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-11.md#_snippet_13

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

const plugin = new Elysia()
	.guard({
		response: t.String()
	})
	.onBeforeHandle(() => { console.log('called') })
	.get('/ok', () => 'ok')
	.get('/not-ok', () => 1)
	.as('global') // [!code ++]

const instance = new Elysia()
	.use(plugin)
	.get('/no-ok-parent', () => 2)

const parent = new Elysia()
	.use(instance)
	// This now errors because `scoped` is lifted up to parent
	.get('/ok', () => 3)

// This allows casting multiple hook scopes at once, lifting them to the parent instance without individual hook configurations.
```

----------------------------------------

TITLE: ElysiaJS Type Coercion and Validation
DESCRIPTION: Shows ElysiaJS's ability to coerce types and validate them. The example defines a route that expects a numeric 'id' in the query, but demonstrates a case where a non-numeric value ('salt') is provided, leading to a ValidationError.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const demo3 = new Elysia()
 	.guard({
        query: t.Object({
            name: t.Number()
        })
    })
    .get('/query?id=1', ({ query: { id } }) => id)
    .get('/query?id=salt', ({ query: { id } }) => id)
```

----------------------------------------

TITLE: Use ElysiaJS Macro in Route Definition
DESCRIPTION: Shows how to apply the custom 'isSignIn' macro to an ElysiaJS route. By setting 'isSignIn: true' in the route's options, the defined authentication hook is automatically integrated, simplifying route configuration and promoting code reuse.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_28

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

export const user = new Elysia({ prefix: '/user' }).use(userService).get(
    '/profile',
    ({ cookie: { token }, store: { session }, status }) => {
        const username = session[token.value]

        if (!username)
            return status(401, {
                success: false,
                message: 'Unauthorized'
            })

        return {
            success: true,
            username
        }
    },
    {
        isSignIn: true,
        cookie: 'session'
    }
)
```

----------------------------------------

TITLE: ElysiaJS Query Parameter Validation
DESCRIPTION: Illustrates validating query parameters in ElysiaJS. The first example expects a string 'name' query parameter. The second shows how to handle multiple values for the same query parameter and validate them as an array of strings.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const demo1 = new Elysia()
    .get('/none', () => 'hi')
    .guard({
        query: t.Object({
            name: t.String()
        })
    })
    .get('/query', ({ query: { name } }) => name)
```

LANGUAGE: javascript
CODE:
```
const demo4 = new Elysia()
 	.guard({
        query: t.Object({
            name: t.Array(t.String()),
            squad: t.String()
        })
    })
    .get('/query?name=rapi,anis,neon&squad=counter', ({ query: { id } }) => id)
    .get('/query?name=rapi&name=anis&name=neon&squad=counter', ({ query: { id } }) => id)
```

----------------------------------------

TITLE: Elysia OpenTelemetry Axiom Export Configuration
DESCRIPTION: Shows how to configure the `@elysiajs/opentelemetry` plugin to export telemetry data to Axiom by specifying the export URL and authentication headers. This setup requires Axiom environment variables for token and dataset.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/opentelemetry.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import {
	Elysia
} from 'elysia'
import {
	opentelemetry
} from '@elysiajs/opentelemetry'

import {
	BatchSpanProcessor
} from '@opentelemetry/sdk-trace-node'
import {
	OTLPTraceExporter
} from '@opentelemetry/exporter-trace-otlp-proto'

new Elysia().use(
	opentelemetry({
		spanProcessors: [
			new BatchSpanProcessor(
				new OTLPTraceExporter({
					url: 'https://api.axiom.co/v1/traces',
				headers: {
					Authorization: `Bearer ${Bun.env.AXIOM_TOKEN}`,
					'X-Axiom-Dataset': Bun.env.AXIOM_DATASET
				}
			})
		]
	})
)
```

----------------------------------------

TITLE: Note Management API Endpoints
DESCRIPTION: Defines the API endpoints for managing notes, including creating, retrieving, updating, and deleting notes. It utilizes Elysia's routing, parameter validation, and state management for note data.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
Note Management API:

POST /
  Description: Creates a new note.
  Request Body:
    memo: string
  Response:
    200 OK: Note created successfully.
    422 Unprocessable Entity: Invalid input.

GET /:index
  Description: Retrieves a note by its index.
  Parameters:
    index: number (Path parameter, the index of the note)
  Response:
    200 OK: Returns the note data.
    404 Not Found: If the note with the specified index does not exist.

DELETE /:index
  Description: Deletes a note by its index.
  Parameters:
    index: number (Path parameter, the index of the note to delete)
  Response:
    200 OK: Note deleted successfully.
    422 Unprocessable Entity: If the note does not exist.

PATCH /:index
  Description: Updates an existing note by its index. Requires user to be signed in.
  Parameters:
    index: number (Path parameter, the index of the note to update)
  Request Body:
    data: string (The new content for the note)
  Authentication:
    Requires user to be signed in (isSignIn: true).
  Response:
    200 OK: Note updated successfully.
    422 Unprocessable Entity: If the note with the specified index does not exist.

```

----------------------------------------

TITLE: Static Plugin Configuration Options
DESCRIPTION: Details the configuration options available for the ElysiaJS static plugin, including default values and their purpose.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/static.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Static Plugin Configuration:

- assets: Path to the folder to expose as static.
  @default "public"

- prefix: Path prefix to register public files.
  @default "/public"

- ignorePatterns: List of files to ignore from serving as static files.
  @default []

- staticLimit: Limits the number of static paths registered directly to the Router. Exceeding this limit lazily adds paths to reduce memory usage.
  @default 1024

- alwaysStatic: If set to true, static files paths will be registered to Router skipping the staticLimits.
  @default false

- headers: Set response headers for files.
  @default {}

- indexHTML: If set to true, the index.html file from the static directory will be served for any request matching neither a route nor an existing static file.
  @default false
```

----------------------------------------

TITLE: Cookie Handling: Fastify vs Elysia
DESCRIPTION: Demonstrates cookie parsing and setting in Fastify using `@fastify/cookie` and Elysia's built-in signal-based approach. Elysia handles signature verification and signing automatically.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_17

LANGUAGE: ts
CODE:
```
import fastify from 'fastify'
import cookie from '@fastify/cookie'

const app = fastify()

app.use(cookie, {
	secret: 'secret',
	hook: 'onRequest'
})

app.get('/', function (request, reply) {
	request.unsignCookie(request.cookies.name)

	reply.setCookie('name', 'value', {
      	path: '/',
      	signed: true
    })
})
```

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia({
	cookie: {
		secret: 'secret'
	}
})
	.get('/', ({ cookie: { name } }) => {
		// signature verification is handle automatically
		name.value

		// cookie signature is signed automatically
		name.value = 'value'
		name.maxAge = 1000 * 60 * 60 * 24
	})
```

----------------------------------------

TITLE: Subrouter Implementation Comparison
DESCRIPTION: Compares how Elysia.js and Fastify.js define and register subrouters. Elysia treats instances as pluggable components, while Fastify uses a function callback.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_2

LANGUAGE: ts
CODE:
```
import fastify, { FastifyPluginCallback } from 'fastify'

const subRouter: FastifyPluginCallback = (app, opts, done) => {
	app.get('/user', (request, reply) => {
		reply.send('Hello User')
	})
}

const app = fastify()

app.register(subRouter, {
	prefix: '/api'
})
```

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const subRouter = new Elysia({ prefix: '/api' })
	.get('/user', 'Hello User')

const app = new Elysia()
	.use(subRouter)
```

----------------------------------------

TITLE: ElysiaJS Route with Schema-Driven Body (TypeScript)
DESCRIPTION: Shows how to integrate the `db` singleton into an ElysiaJS application to define request body schemas. This example uses the `user` schema from the `db` singleton to validate the payload for a '/sign-up' POST endpoint.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/drizzle.md#_snippet_8

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'
import { db } from './database/model'

const { user } = db.insert

new Elysia()
	.post('/sign-up', ({ body }) => {
		// Create a new user
	}, {
		body: t.Object({
			id: user.username,
			username: user.username,
			password: user.password
		})
	})
```

----------------------------------------

TITLE: ElysiaJS Authentication Routes (Sign-up/Sign-in)
DESCRIPTION: Defines the API endpoints for user sign-up and sign-in using ElysiaJS. It includes schema validation for request bodies and integrates with Supabase for authentication operations. The routes handle user registration and login, returning user data or errors.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-supabase.md#_snippet_7

LANGUAGE: apidoc
CODE:
```
POST /sign-up
  Description: Registers a new user.
  Request Body Schema: sign
  Handler:
    - Calls supabase.auth.signUp(body)
    - Returns error if present, otherwise returns user data.

POST /sign-in
  Description: Authenticates an existing user.
  Request Body Schema: sign
  Handler:
    - Calls supabase.auth.signInWithPassword(body)
    - Returns error if present, otherwise returns user data.

Schema: sign
  type: object
  properties:
    email:
      type: string
      format: email
    password:
      type: string
      minLength: 8
```

----------------------------------------

TITLE: Define Query Parameters with Elysia.js Schema
DESCRIPTION: Illustrates how to define and validate URL query parameters using `t.Object` for the `query` property in Elysia.js routes. This example shows how Elysia extracts key-value pairs from the URL and applies schema validation.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
	.get('/query', ({ query }) => query, {
		query: t.Object({
			name: t.String()
		})
	})
	.listen(3000)
```

----------------------------------------

TITLE: Consume Stream Response with Elysia Eden
DESCRIPTION: Demonstrates how Elysia's Eden interprets stream responses as AsyncGenerator, allowing consumption via 'for await'. The example shows fetching and logging chunks from an Elysia endpoint using treaty.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/handler.md#_snippet_26

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { treaty } from '@elysiajs/eden'

const app = new Elysia()
	.get('/ok', function* () {
		yield 1
		yield 2
		yield 3
	})

const { data, error } = await treaty(app).ok.get()
if (error) throw error

for await (const chunk of data)
	console.log(chunk)
```

----------------------------------------

TITLE: Elysia OpenAPI Schema 3.0 Compliance
DESCRIPTION: ElysiaJS's type system is compliant with OpenAPI Schema 3.0, enabling automatic generation of API documentation compatible with tools like Swagger. This compliance ensures type safety and facilitates documentation creation.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/with-prisma.md#_snippet_13

LANGUAGE: apidoc
CODE:
```
OpenAPI Schema 3.0 Compliance:
  - Elysia's type system inherently supports OpenAPI Schema 3.0.
  - This allows for automatic generation of API documentation.
  - Tools like Swagger can consume this schema for interactive documentation.

Elysia Swagger Plugin Integration:
  - Use `import { swagger } from '@elysiajs/swagger'` to import the plugin.
  - Register the plugin with `app.use(swagger())`.

Route Definition with Schemas:
  - Define request `body`, `params`, `query`, and `response` using `t` (Elysia's type helper).
  - Example POST route:
    POST /
      Request Body:
        type: object
        properties:
          username: { type: string }
          password: { type: string, minLength: 8 }
      Response Body:
        type: object
        properties:
          id: { type: number }
          username: { type: string }
      Errors:
        - P2002 (Unique constraint failed): Returns { error: 'Username must be unique' }

Benefits:
  - Automatic documentation generation.
  - Type safety for requests and responses.
  - Early detection of schema mismatches (e.g., accidentally returning password).
  - Enhanced developer experience with auto-completion.
```

----------------------------------------

TITLE: Mount Multiple Elysia Projects
DESCRIPTION: Shows how to mount multiple independent Elysia projects into a single server instance. By importing and mounting other Elysia applications, developers can consolidate different projects into one deployment.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-06.md#_snippet_6

LANGUAGE: ts
CODE:
```
import A from 'project-a/elysia'
import B from 'project-b/elysia'
import C from 'project-c/elysia'

new Elysia()
    .mount(A)
    .mount(B)
    .mount(C)
```

----------------------------------------

TITLE: Elysia.js Model Definition and Usage
DESCRIPTION: Demonstrates defining reusable models using Elysia's `.model()` method and referencing them in route definitions for request bodies and cookies. This promotes DRY principles by avoiding repetitive schema declarations.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_23

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

export const user = new Elysia({ prefix: '/user' })
    .state({
        user: {} as Record<string, string>,
        session: {} as Record<number, string>
    })
    .model({
        // Define a reusable model for sign-in credentials
        signIn: t.Object({
            username: t.String({ minLength: 1 }),
            password: t.String({ minLength: 8 })
        }),
        // Define a model for session cookies
        session: t.Cookie(
            {
                token: t.Number()
            },
            {
                secrets: 'seia'
            }
        ),
        // Define an optional session cookie model
        optionalSession: t.Cookie(
            {
                token: t.Optional(t.Number())
            },
            {
                secrets: 'seia'
            }
        )
    })
    .put(
        '/sign-up',
        async ({ body: { username, password }, store, status }) => {
            if (store.user[username])
                return status(400, {
                    success: false,
                    message: 'User already exists'
                })
            store.user[username] = await Bun.password.hash(password)

            return {
                success: true,
                message: 'User created'
            }
        },
        {
            // Reference the 'signIn' model for the request body
            body: 'signIn'
        }
    )
    .post(
        '/sign-in',
        async ({
            store: { user, session },
            status,
            body: { username, password },
            cookie: { token }
        }) => {
            if (
                !user[username] ||
                !(await Bun.password.verify(password, user[username]))
            )
                return status(400, {
                    success: false,
                    message: 'Invalid username or password'
                })

            const key = crypto.getRandomValues(new Uint32Array(1))[0]
            session[key] = username
            token.value = key

            return {
                success: true,
                message: `Signed in as ${username}`
            }
        },
        {
            // Reference the 'signIn' model for the request body
            body: 'signIn',
            // Reference the 'session' model for the cookie
            cookie: 'session'
        }
    )
```

----------------------------------------

TITLE: Elysia.all for Any HTTP Method
DESCRIPTION: Demonstrates the use of Elysia.all to create a route that responds to any HTTP method for a given path. This simplifies handling requests when the specific verb doesn't alter the response.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/route.md#_snippet_15

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .all('/', 'hi')
    .listen(3000)
```

----------------------------------------

TITLE: Elysia: Basic Testing with Web Standard API
DESCRIPTION: Demonstrates testing an Elysia application by directly handling `Request` objects, leveraging its adherence to Web Standard APIs. This method is flexible and doesn't require specific testing libraries.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-express.md#_snippet_20

LANGUAGE: TypeScript
CODE:
```
import { Elysia } from 'elysia'
import { describe, it, expect } from 'vitest'

const app = new Elysia()
	.get('/', 'Hello World')

describe('GET /', () => {
	it('should return Hello World', async () => {
		const res = await app.handle(
			new Request('http://localhost')
		)

		expect(res.status).toBe(200)
		expect(await res.text()).toBe('Hello World')
	})
})
```

----------------------------------------

TITLE: Elysia Server with Swagger Plugin
DESCRIPTION: Configures an Elysia server to automatically generate OpenAPI (Swagger) documentation with a single line of code using the @elysiajs/swagger plugin. It also demonstrates defining models and typed request bodies.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/integrate-trpc-with-elysia.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'
import { swagger } from '@elysiajs/swagger' // [!code ++]

const app = new Elysia()
    .use(swagger()) // [!code ++]
    .setModel({
        sign: t.Object({
            username: t.String(),
            password: t.String()
        })
    })
    .get('/', () => 'Hello Elysia')
    .post('/typed-body', ({ body }) => body, {
        schema: {
            body: 'sign',
            response: 'sign'
        }
    })
    .listen(3000)

export type App = typeof app

console.log(`🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`)
```

----------------------------------------

TITLE: Elysia Instance: Lifting Scoped Hooks with as('plugin')
DESCRIPTION: Shows how to use `instance.as('plugin')` to lift the `scoped` hook and schema definitions from a plugin to the parent instance. This changes how subsequent routes are handled, allowing parent-level application of scoped features.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-11.md#_snippet_12

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

const plugin = new Elysia()
	.guard({
		as: 'scoped',
		response: t.String()
	})
	.get('/ok', () => 'ok')
	.get('/not-ok', () => 1)

const instance = new Elysia()
	.use(plugin)
	.as('plugin') // [!code ++]
	.get('/no-ok-parent', () => 2)

const parent = new Elysia()
	.use(instance)
	// This now errors because `scoped` is lifted up to parent
	.get('/ok', () => 3)

// The `as('plugin')` cast lifts all an instance's scope up, including guards and schemas, to the parent context.
```

----------------------------------------

TITLE: Define Drizzle User Schema
DESCRIPTION: Example Drizzle schema definition for a 'user' table. It includes fields like id, username, password, email, salt, and creation timestamp, using PostgreSQL specific types and CUID for unique IDs.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/drizzle.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import {
    relations
} from 'drizzle-orm'
import {
    pgTable,
    varchar,
    timestamp
} from 'drizzle-orm/pg-core'

import { createId } from '@paralleldrive/cuid2'

export const user = pgTable(
    'user',
    {
        id: varchar('id')
            .$defaultFn(() => createId())
            .primaryKey(),
        username: varchar('username').notNull().unique(),
        password: varchar('password').notNull(),
        email: varchar('email').notNull().unique(),
        salt: varchar('salt', { length: 64 }).notNull(),
        createdAt: timestamp('created_at').defaultNow().notNull(),
    }
)

export const table = {
	user
} as const

export type Table = typeof table
```

----------------------------------------

TITLE: Elysia Decorator Usage with Use and Prefix
DESCRIPTION: Illustrates how to use decorators defined in one Elysia instance with another using the '.use()' method and '.prefix()' for namespacing. It shows accessing a decorated property ('setupCarbon').

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/handler.md#_snippet_8

LANGUAGE: typescript
CODE:
```
const setup = new Elysia({ name: 'setup' })
    .decorate({
        argon: 'a',
        boron: 'b',
        carbon: 'c'
    })

const demo5 = new Elysia()
    .use(
        setup
            .prefix('decorator', 'setup')
    )
    .get('/', ({ setupCarbon }) => setupCarbon)
```

LANGUAGE: typescript
CODE:
```
const demo6 = new Elysia()
    .use(setup.prefix('all', 'setup'))
    .get('/', ({ setupCarbon }) => setupCarbon)
```

----------------------------------------

TITLE: Lazy Load Module with Dynamic Import
DESCRIPTION: Shows how to use dynamic `import()` syntax to lazy-load modules in Elysia. This approach defers module registration until it's actually needed, improving initial server startup time for computationally heavy or blocking modules.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/plugin.md#_snippet_25

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
    .use(import('./plugin'))
```

----------------------------------------

TITLE: Elysia Sign-up/Sign-in with Supabase
DESCRIPTION: Integrates Supabase authentication into Elysia.js sign-up and sign-in routes. It handles user registration and login, returning user data or errors from Supabase.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-supabase.md#_snippet_5

LANGUAGE: ts
CODE:
```
// src/modules/authen.ts
import { Elysia } from 'elysia'
import { supabase } from '../../libs'  // [!code ++]

const authen = (app: Elysia) =>
    app.group('/auth', (app) =>
        app
            .post('/sign-up', async ({ body }) => {
                const { data, error } = await supabase.auth.signUp(body) // [!code ++]
 // [!code ++]
                if (error) return error // [!code ++]

                return data.user // [!code ++]
                return 'This route is expected to sign up a user' // [!code --]
            })
            .post('/sign-in', async ({ body }) => {
                const { data, error } = await supabase.auth.signInWithPassword( // [!code ++]
                    body // [!code ++]
                ) // [!code ++]
 // [!code ++]
                if (error) return error // [!code ++]
 // [!code ++]
                return data.user // [!code ++]
                return 'This route is expected to sign in a user' // [!code --]
            })
    )

```

----------------------------------------

TITLE: Define and Set Typed Cookie with Schema in Elysia
DESCRIPTION: Illustrates how to define a cookie schema for validation and type inference in Elysia. This example shows setting a cookie with a complex object value, leveraging `t.Cookie` and `t.Object` for structured data.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-07.md#_snippet_2

LANGUAGE: typescript
CODE:
```
app.get('/', ({ cookie: { name } }) => {
    // Set
    name.value = {
        id: 617,
        name: 'Summoning 101'
    }
}, {
    cookie: t.Cookie({
        value: t.Object({
            id: t.Numeric(),
            name: t.String()
        })
    })
})
```

----------------------------------------

TITLE: Define Routes with Custom HTTP Methods
DESCRIPTION: Shows how to define routes using non-standard HTTP methods like 'M-SEARCH' in addition to common ones like GET and POST. This highlights Elysia's flexibility in supporting custom request methods.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/route.md#_snippet_2

LANGUAGE: typescript
CODE:
```
const demo8 = new Elysia()
    .get('/get', () => 'hello')
    .post('/post', () => 'hi')
    .route('M-SEARCH', '/m-search', () => 'connect')
```

----------------------------------------

TITLE: Serve Single File with Elysia
DESCRIPTION: Shows how to serve a single static file directly using Elysia's `file` helper, bypassing the static plugin for specific file routes.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/plugins/static.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import {
    Elysia,
    file
} from 'elysia'

new Elysia()
    .get('/file', file('public/takodachi.png'))
```

----------------------------------------

TITLE: Elysia Drizzle Typebox Spread Utility Usage Example
DESCRIPTION: Demonstrates how to use the `spread` utility function to create Elysia schemas by converting Drizzle schemas into plain objects. This approach is shown as an alternative to using `t.Pick` directly on Drizzle-generated schemas.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/drizzle.md#_snippet_6

LANGUAGE: typescript
CODE:
```
// ✅ Using spread utility function
const user = spread(table.user, 'insert')

const createUser = t.Object({
	id: user.id, // { type: 'string' }
	username: user.username, // { type: 'string' }
	password: user.password // { type: 'string' }
})

// ⚠️ Using t.Pick
const _createUser = createInsertSchema(table.user)

const createUser = t.Pick(
	_createUser,
	['id', 'username', 'password']
)
```

----------------------------------------

TITLE: Elysia Hook Scoping Comparison: 1.0 vs 1.1
DESCRIPTION: Compares the hook scoping mechanisms in Elysia 1.0 and 1.1. It highlights how Elysia 1.1's `as('plugin')` simplifies applying scoped hooks like `onBeforeHandle`, `onAfterHandle`, and `onParse` to parent instances compared to the more verbose 1.0 approach.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-11.md#_snippet_15

LANGUAGE: typescript
CODE:
```
// On 1.0
const from = new Elysia()
	// Not possible to apply guard to parent on 1.0
	.guard({
		response: t.String()
	})
	.onBeforeHandle({ as: 'scoped' }, () => { console.log('called') })
	.onAfterHandle({ as: 'scoped' }, () => { console.log('called') })
	.onParse({ as: 'scoped' }, () => { console.log('called') })

// On 1.1
const to = new Elysia()
	.guard({
		response: t.String()
	})
	.onBeforeHandle(() => { console.log('called') })
	.onAfterHandle(() => { console.log('called') })
	.onParse(() => { console.log('called') })
	.as('plugin')

// In Elysia 1.1, the `.as('plugin')` method consolidates the application of scoped hooks and schemas, making the code cleaner and more maintainable.
```

----------------------------------------

TITLE: Encode Schema and t.Transform
DESCRIPTION: The encodeSchema configuration, moved out of experimental and enabled by default, allows the use of t.Transform. This enables custom response mapping, intercepting values to transform them before returning to the end user. For example, replacing specific strings in a response.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-13.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
encodeSchema: boolean | ((value: any) => any)
  - Enables or configures the schema encoding process.
  - When set to true, uses default encoding.
  - When set to a function, it acts as a global interceptor for all schema transformations.

t.Transform(schema, transformer)
  - A TypeBox type that allows transforming values within a schema.
  - Parameters:
    - schema: The base TypeBox schema.
    - transformer: A function that receives the value and returns the transformed value.
  - Example:
    t.Transform(t.String(), (value) => value.replace('hi', 'intercepted'))
```

----------------------------------------

TITLE: Elysia vs. Fastify: Basic Request Testing
DESCRIPTION: Demonstrates how Fastify uses `fastify.inject()` to simulate network requests, while Elysia uses Web Standard API's `Request` object to perform actual requests for testing.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_19

LANGUAGE: ts
CODE:
```
import fastify from 'fastify'
import request from 'supertest'
import { describe, it, expect } from 'vitest'

function build(opts = {}) {
  	const app = fastify(opts)

  	app.get('/', async function (request, reply) {
	    reply.send({ hello: 'world' })
	})

  	return app
}

describe('GET /', () => {
	it('should return Hello World', async () => {
  		const app = build()

		const response = await app.inject({
		    url: '/',
		    method: 'GET',
	  	})

		expect(response.status).toBe(200)
		expect(response.text).toBe('Hello World')
	})
})

```

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'
import { describe, it, expect } from 'vitest'

const app = new Elysia()
	.get('/', 'Hello World')

describe('GET /', () => {
	it('should return Hello World', async () => {
		const res = await app.handle(
			new Request('http://localhost')
		)

		expect(res.status).toBe(200)
		expect(await res.text()).toBe('Hello World')
	})
})

```

----------------------------------------

TITLE: Elysia TypeBox 0.34 Support
DESCRIPTION: Highlights Elysia's integration with TypeBox 0.34, specifically its use of `t.Module` to manage model references and support circular recursive types. An example demonstrates defining and using a recursive type for request body validation.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-12.md#_snippet_5

LANGUAGE: ts
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
	.model({
		a: t.Object({
			a: t.Optional(t.Ref('a'))
		})
	})
	.post('/recursive', ({ body }) => body, {
                         // ^?
		body: 'a'
	})

```

----------------------------------------

TITLE: Define OpenAPI Tags for Elysia Routes
DESCRIPTION: Demonstrates how to define tags for OpenAPI schema for all routes of an instance using the `tags` option in Elysia. This helps in organizing API documentation.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/configuration.md#_snippet_18

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

new Elysia({
	tags: ['elysia']
})
```

----------------------------------------

TITLE: Elysia Controller Pattern: Using Elysia Instance
DESCRIPTION: Shows the recommended approach for controllers in Elysia, treating the Elysia instance itself as the controller. This avoids issues with complex type passing and static analysis.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/structure.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { Service } from './service'

new Elysia()
    .get('/', ({ stuff }) => {
        Service.doStuff(stuff)
    })
```

----------------------------------------

TITLE: Elysia Instance: Lifting Multiple Hook Scopes with as('global')
DESCRIPTION: Shows how to use `instance.as('global')` to lift multiple hook scopes, such as `response`, `onBeforeHandle`, `onAfterHandle`, and `onParse`, to the global context. This simplifies applying consistent scoping across various hook types.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-11.md#_snippet_14

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

const plugin = new Elysia()
	.guard({
		response: t.String()
	})
	.onBeforeHandle(() => { console.log('called') })
	.get('/ok', () => 'ok')
	.get('/not-ok', () => 1)
	.as('global') // [!code ++]

const instance = new Elysia()
	.use(plugin)
	.get('/no-ok-parent', () => 2)

const parent = new Elysia()
	.use(instance)
	// This now errors because `scoped` is lifted up to parent
	.get('/ok', () => 3)

// This allows casting multiple hook scopes all at once without adding `as` to each hook or applying it to guard, or lifting an existing plugin scope up.
```

----------------------------------------

TITLE: Secure Cookies with Signature Verification in Elysia
DESCRIPTION: Explains how to implement cookie signature verification in Elysia for enhanced security. This example shows configuring a secret key and specifying which cookies should be signed, allowing Elysia to automatically handle signing and unsigning.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-07.md#_snippet_3

LANGUAGE: typescript
CODE:
```
new Elysia({
    cookie: {
        secret: 'Fischl von Luftschloss Narfidort'
    }
})
    .get('/', ({ cookie: { profile } }) => {
        profile.value = {
            id: 617,
            name: 'Summoning 101'
        }
    }, {
        cookie: t.Cookie({
            profile: t.Object({
                id: t.Numeric(),
                name: t.String()
            })
        }, {
            sign: ['profile']
        })
    })
```

----------------------------------------

TITLE: Cookie Schema Validation
DESCRIPTION: Explains how to use Elysia's type system ('t') to define a strict schema for cookie values, enabling type validation and inference. This example validates a cookie named 'name' as an object with 'id' (numeric) and 'name' (string) properties.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/cookie.md#_snippet_4

LANGUAGE: ts
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
    .get('/', ({ cookie: { name } }) => {
        // Set
        name.value = {
            id: 617,
            name: 'Summoning 101'
        }
    }, {
        cookie: t.Cookie({
            name: t.Object({
                id: t.Numeric(),
                name: t.String()
            })
        })
    })
```

----------------------------------------

TITLE: ElysiaJS Body: Validate Incoming Request Body
DESCRIPTION: Shows how to validate the incoming HTTP request body in ElysiaJS using declarative schemas. This snippet defines a JSON body structure with a required string property and provides examples of valid and invalid request bodies.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/validation.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

new Elysia()
	.post('/body', ({ body }) => body, {
		body: t.Object({
			name: t.String()
		})
	})
	.listen(3000)
```

----------------------------------------

TITLE: Define ElysiaJS Macro for Authentication Hook
DESCRIPTION: Demonstrates defining a custom macro named 'isSignIn' in ElysiaJS. This macro encapsulates reusable lifecycle logic, specifically an 'onBeforeHandle' hook for authentication, which can be conditionally enabled.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_27

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

export const userService = new Elysia({ name: 'user/service' })
    .state({
        user: {} as Record<string, string>,
        session: {} as Record<number, string>
    })
    .model({
        signIn: t.Object({
            username: t.String({ minLength: 1 }),
            password: t.String({ minLength: 8 })
        }),
        session: t.Cookie(
            {
                token: t.Number()
            },
            {
                secrets: 'seia'
            }
        ),
        optionalSession: t.Cookie(
            {
                token: t.Optional(t.Number())
            },
            {
                secrets: 'seia'
            }
        )
    })
    .macro({
        isSignIn(enabled: boolean) {
            if (!enabled) return

            return {
                beforeHandle({
                    status,
                    cookie: { token },
                    store: { session }
                }) {
                    if (!token.value)
                        return status(401, {
                            success: false,
                            message: 'Unauthorized'
                        })

                    const username = session[token.value as unknown as number]

                    if (!username)
                        return status(401, {
                            success: false,
                            message: 'Unauthorized'
                        })
                }
            }
        }
    })
```

----------------------------------------

TITLE: Access Handler Return Value in Elysia.js onAfterResponse
DESCRIPTION: This example demonstrates how to access the value returned by the route handler within the `onAfterResponse` hook in Elysia.js. It clarifies that the `response` parameter in this hook refers to the handler's return value, not a Web-Standard `Response` object.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/life-cycle.md#_snippet_39

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
	.onAfterResponse(({ response }) => {
		console.log(response)
	})
	.get('/', () => 'Hello')
	.listen(3000)
```

----------------------------------------

TITLE: Note API Endpoints
DESCRIPTION: Defines the API endpoints for managing notes within the ElysiaJS application. Includes methods for retrieving all notes, adding new notes with author information, fetching a specific note by index, deleting a note, and updating a note.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_34

LANGUAGE: APIDOC
CODE:
```
Note API:
  Base Path: /note

  GET /
    Description: Retrieves all notes.
    Returns: Array of Memo objects.

  PUT /
    Description: Adds a new note with the authenticated user as the author.
    Request Body:
      Content Type: application/json
      Schema: memo (Elysia model, omits 'author')
    Example Body:
      { "data": "My first note" }
    Returns: Array of Memo objects after addition.

  GET /:index
    Description: Retrieves a specific note by its index.
    Parameters:
      - name: index
        in: path
        required: true
        schema:
          type: integer
    Returns: Memo object if found, otherwise 404 Not Found.

  DELETE /:index
    Description: Removes a note at the specified index.
    Parameters:
      - name: index
        in: path
        required: true
        schema:
          type: integer
    Returns: The removed note data if successful, otherwise 422 Unprocessable Entity.

  PATCH /:index
    Description: Updates a note at the specified index with new data and the authenticated user as the author.
    Parameters:
      - name: index
        in: path
        required: true
        schema:
          type: integer
    Request Body:
      Content Type: application/json
      Schema: memo (Elysia model, omits 'author')
    Example Body:
      { "data": "Updated note content" }
    Returns: The updated Memo object if successful, otherwise 422 Unprocessable Entity.
```

----------------------------------------

TITLE: Elysia Eden Validation Error Handling
DESCRIPTION: Explains that Elysia's Eden integration now automatically assigns a `422` status code for validation errors when a model is provided. The example shows how to handle these specific validation errors by checking the error status and accessing the summary.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-12.md#_snippet_6

LANGUAGE: ts
CODE:
```
import { treaty } from '@elysiajs/eden'
import type { App } from './app'

const api = treaty<App>('localhost:3000')

const { data, error } = await api.user.put({
	name: 'saltyaom'
})

if(error)
	switch(error.status) {
		case 422:
			console.log(error.summary)
			break

		default:
			console.error(error)
	}

```

----------------------------------------

TITLE: Specifying Hook Type for Inheritance
DESCRIPTION: Introduces the new hook type system in ElysiaJS. By adding `{ as: hookType }` to a hook definition, developers can explicitly control its inheritance behavior: 'local' (default), 'scoped', or 'global'. This example shows the syntax change for `onBeforeHandle`.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-10.md#_snippet_6

LANGUAGE: typescript
CODE:
```
const plugin = new Elysia()
    .onBeforeHandle({ as: 'global' }, () => { // [!code ++]
        console.log('hi')
    })
    .get('/child', () => 'log hi')

const main = new Elysia()
    .use(plugin)
    .get('/parent', () => 'log hi')
```

----------------------------------------

TITLE: Elysia mapResponse for Custom Response Compression
DESCRIPTION: Demonstrates using the mapResponse lifecycle hook in Elysia to intercept and transform responses. This example compresses the response body using gzipSync from Bun, showcasing custom response mapping after the main handler logic.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-08.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Elysia, mapResponse } from 'elysia'
import { gzipSync } from 'bun'

new Elysia()
    .mapResponse(({ response }) => {
        return new Response(
            gzipSync(
                typeof response === 'object'
                    ? JSON.stringify(response)
                    : response.toString()
            )
        )
    })
    .listen(3000)
```

----------------------------------------

TITLE: Elysia Decorate and Resolve for Type Safety
DESCRIPTION: Demonstrates Elysia's `decorate` and `resolve` methods for extending context with type safety. `decorate` adds properties directly, while `resolve` allows asynchronous context creation, ensuring properties are available and type-checked throughout handlers.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_7

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
	.decorate('version', 2)
	.get('/version', ({ version }) => version)
	.resolve(({ status, headers: { authorization } }) => {
		if(!authorization?.startsWith('Bearer '))
			return status(401)

		return {
			token: authorization.split(' ')[1]
		}
	})
	.get('/token', ({ token, version }) => {
		version
		//  ^?

		return token
		//       ^?
	})

// app.listen({ port: 3000 })

```

----------------------------------------

TITLE: Elysia.js Union Response Example
DESCRIPTION: Demonstrates how to define multiple response statuses for a single route using Union Types in Elysia.js. This allows for returning different schema objects based on the HTTP status code, enhancing API clarity and Swagger documentation.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-02.md#_snippet_3

LANGUAGE: typescript
CODE:
```
app
    .post(
        '/json/:id',
        ({ body, params: { id } }) => ({
            ...body,
            id
        }),
        {
            schema: {
                body: 'sign',
                response: {
                    200: t.Object({
                        username: t.String(),
                        password: t.String(),
                        id: t.String()
                    }),
                    400: t.Object({
                        error: t.String()
                    })
                }
            }
        }
    )
```

----------------------------------------

TITLE: ElysiaJS Serve Configuration
DESCRIPTION: Customizes HTTP server behavior, extending Bun's serve API. Allows configuration of hostname, TLS settings, request body size limits, and more.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/configuration.md#_snippet_13

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

new Elysia({
	serve: {
		hostname: 'elysiajs.com',
		ls: {
			cert: Bun.file('cert.pem'),
			key: Bun.file('key.pem')
		}
	},
})
```

----------------------------------------

TITLE: Getting Current Span with getCurrentSpan
DESCRIPTION: Shows how to retrieve the current active span within an ElysiaJS request context using the `getCurrentSpan` utility. This allows for setting attributes or performing operations on the span even when outside of a direct handler function, leveraging AsyncLocalStorage.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/integrations/opentelemetry.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import { getCurrentSpan } from '@elysiajs/opentelemetry'

function utility() {
	const span = getCurrentSpan()
	span.setAttributes({
		'custom.attribute': 'value'
	})
}
```

----------------------------------------

TITLE: ElysiaJS Scoped Lifecycle Management
DESCRIPTION: Demonstrates how to manage ElysiaJS encapsulation lifecycle by applying the 'scoped' annotation. Covers direct annotation within guard/resolve and chaining the .as('scoped') method to ensure lifecycle effects are contained.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_30

LANGUAGE: typescript
CODE:
```
export const getUserId = new Elysia()
    .use(userService)
    .guard({
        isSignIn: true,
        cookie: 'session'
    })
    .resolve(({ store: { session }, cookie: { token } }) => ({
        username: session[token.value]
    }))

export const user = new Elysia({ prefix: '/user' })
    .use(getUserId)
    .get('/profile', ({ username }) => ({
        success: true,
        username
    }))
```

LANGUAGE: typescript
CODE:
```
export const getUserId = new Elysia()
    .use(userService)
    .guard({
        as: 'scoped',
        isSignIn: true,
        cookie: 'session'
    })
    .resolve(
        { as: 'scoped' },
        ({ store: { session }, cookie: { token } }) => ({
            username: session[token.value]
        })
    )

export const user = new Elysia({ prefix: '/user' })
    .use(getUserId)
    .get('/profile', ({ username }) => ({

        success: true,
        username
    }))
```

LANGUAGE: typescript
CODE:
```
export const getUserId = new Elysia()
    .use(userService)
    .guard({
        as: 'scoped',
        isSignIn: true,
        cookie: 'session'
    })
    .resolve(
        { as: 'scoped' },
        ({ store: { session }, cookie: { token } }) => ({
            username: session[token.value]
        })
    )
    .as('scoped')

export const user = new Elysia({ prefix: '/user' })
    .use(getUserId)
    .get('/profile', ({ username }) => ({
        success: true,
        username
    }))
```

----------------------------------------

TITLE: Access and Set Cookie Values in Elysia
DESCRIPTION: Demonstrates how to access and modify cookie values using Elysia's reactive cookie API. It highlights the direct property access for getting and setting cookie values, which are automatically synchronized with HTTP headers.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-07.md#_snippet_1

LANGUAGE: typescript
CODE:
```
app.get('/', ({ cookie: { name } }) => {
    // Get
    name.value

    // Set
    name.value = "New Value"
})
```

----------------------------------------

TITLE: Infer Context from Elysia Instance
DESCRIPTION: Shows an alternative, though less preferred, method for services that absolutely require context inference. It uses `InferContext` from Elysia to derive the context type from a setup Elysia instance, allowing service methods to access request-specific properties.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/structure.md#_snippet_6

LANGUAGE: typescript
CODE:
```
import { Elysia, type InferContext } from 'elysia'

const setup = new Elysia()
	.state('a', 'a')
	.decorate('b', 'b')

class AuthService {
	constructor() {}

	// ✅ Do
	isSignIn({ status, cookie: { session } }: InferContext<typeof setup>) {
		if (session.value)
			return status(401)
	}
}
```

----------------------------------------

TITLE: Elysia Trace: Parameter Overview
DESCRIPTION: Illustrates how to access the parameters provided by the Elysia trace function. These parameters offer details about the request, context, and lifecycle events.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/trace.md#_snippet_2

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

const app = new Elysia()
	// This is trace parameter
	// hover to view the type
	.trace((parameter) => {
	})
	.get('/', () => 'Hi')
	.listen(3000)
```

----------------------------------------

TITLE: Elysia Inline Error Handling Example
DESCRIPTION: Demonstrates how to use the `error` function within an Elysia route handler to return a response with a specific status code and message. This approach enhances type safety by allowing fine-grained type narrowing from response schemas.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-10.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
    .get('/hello', ({ error }) => {
        if(Math.random() > 0.5) return error(418, 'Nagisa')

        return 'Azusa'
    }, {
        response: t.Object({
            200: t.Literal('Azusa'),
            418: t.Literal('Nagisa')
        })
    })
```

----------------------------------------

TITLE: Elysia Macro API Example
DESCRIPTION: Demonstrates how to define a custom field ('role') using Elysia's Macro API to hook into the lifecycle and enforce access control based on user roles. This allows for type-safe composition of custom logic within routes.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-08.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { auth } from '@services/auth'

const app = new Elysia()
    .use(auth)
    .get('/', ({ user }) => user.profile, {
        role: 'admin'
    })
```

LANGUAGE: typescript
CODE:
```
const plugin = new Elysia({ name: 'plugin' }).macro(({ beforeHandle }) => {
    return {
        role(type: 'admin' | 'user') {
            beforeHandle(
                { insert: 'before' },
                async ({ cookie: { session } }) => {
                  const user = await validateSession(session.value)
                  await validateRole('admin', user)
                }
            )
        }
    }
})
```

----------------------------------------

TITLE: Handle Errors with Eden Fetch (TypeScript)
DESCRIPTION: This snippet demonstrates how to handle potential errors returned by Eden Fetch requests. It shows destructuring the response to get both `data` and `error`, and then using a switch statement to manage different HTTP error statuses and their corresponding values.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/fetch.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { edenFetch } from '@elysiajs/eden'
import type { App } from './server'

const fetch = edenFetch<App>('http://localhost:3000')

// response type: { id: 1895, name: 'Skadi' }
const { data: nendoroid, error } = await fetch('/mirror', {
    method: 'POST',
    body: {
        id: 1895,
        name: 'Skadi'
    }
})

if(error) {
    switch(error.status) {
        case 400:
        case 401:
            throw error.value
            break

        case 500:
        case 502:
            throw error.value
            break

        default:
            throw error.value
            break
    }
}

const { id, name } = nendoroid
```

----------------------------------------

TITLE: Elysia Macro for Custom Middleware Arguments
DESCRIPTION: Demonstrates Elysia's `macro` feature for creating custom middleware with arguments. This approach allows for cleaner, more composable middleware definitions compared to Fastify's function callback pattern.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/migrate/from-fastify.md#_snippet_10

LANGUAGE: ts
CODE:
```
const findUser = (authorization?: string) => {
	return {
		name: 'Jane Doe',
		role: 'admin' as const
	}
}
// ---cut---
import { Elysia } from 'elysia'

const app = new Elysia()
	.macro({
		role: (role: 'user' | 'admin') => ({
			resolve({ status, headers: { authorization } }) {
				const user = findUser(authorization)

				if(user.role !== role)
					return status(401)

				return {
					user
				}
			}
		})
	})
	.get('/token', ({ user }) => user, {
	//                 ^?
		role: 'admin'
	})

// app.listen({ port: 3000 })

```

----------------------------------------

TITLE: Incorrect Method Chaining (Type Inference Failure)
DESCRIPTION: Illustrates a common mistake where method chaining is not used, leading to type inference failures in Elysia. Without chaining, the type information from methods like `.state()` is not correctly propagated, causing errors when accessing properties like `store.build`.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/installation.md#_snippet_5

LANGUAGE: typescript
CODE:
```
// @errors: 2339
import { Elysia } from 'elysia'

const app = new Elysia()

app.state('build', 1)

app.get('/', ({ store: { build } }) => build)

app.listen(3000)
```

----------------------------------------

TITLE: Elysia Type System Overview
DESCRIPTION: Provides an overview of the Elysia type system, highlighting its foundation on TypeBox and its extensions for server-side development. It lists key types available within Elysia.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/type.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
Elysia Type System:

Elysia.t is based on TypeBox with pre-configuration for server usage, providing additional types commonly found in server-side validation.

Key Types:
- UnionEnum: Allows the value to be one of the specified values.
- File: Represents a singular file, useful for file upload validation.
- Files: Extends File, supporting an array of files.
- Cookie: Object-like representation of a Cookie Jar.
- Nullable: Allows the value to be null but not undefined.
- MaybeEmpty: Accepts empty string or null value.
- Form: Validates type for FormData.
- Numeric: Accepts a numeric string or number and transforms it into a number.

Source Code Location: elysia/type-system
```

----------------------------------------

TITLE: Elysia.js CRUD for Notes
DESCRIPTION: Implements CRUD operations for a Note class within an Elysia.js application. It defines routes for getting all notes, adding a note, retrieving a specific note by index, deleting a note by index, and updating a note by index. Includes type definitions for request bodies and parameters.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/tutorial.md#_snippet_18

LANGUAGE: typescript
CODE:
```
import { Elysia, t } from 'elysia'

class Note {
    constructor(public data: string[] = ['Moonhalo']) {}

    add(note: string) {
        this.data.push(note)

        return this.data
    }

    remove(index: number) {
        return this.data.splice(index, 1)
    }

    update(index: number, note: string) {
        return (this.data[index] = note)
    }
}

export const note = new Elysia()
    .decorate('note', new Note())
    .get('/note', ({ note }) => note.data)
    .put('/note', ({ note, body: { data } }) => note.add(data), {
        body: t.Object({
            data: t.String()
        })
    })
    .get(
        '/note/:index',
        ({ note, params: { index }, status }) => {
            return note.data[index] ?? status(404, 'Not Found :(')
        },
        {
            params: t.Object({
                index: t.Number()
            })
        }
    )
    .delete(
        '/note/:index',
        ({ note, params: { index }, status }) => {
            if (index in note.data) return note.remove(index)

            return status(422)
        },
        {
            params: t.Object({
                index: t.Number()
            })
        }
    )
    .patch(
        '/note/:index',
        ({ note, params: { index }, body: { data }, status }) => {
            if (index in note.data) return note.update(index, data)

            return status(422)
        },
        {
            params: t.Object({
                index: t.Number()
            }),
            body: t.Object({
                data: t.String()
            })
        }
    )
```

----------------------------------------

TITLE: Elysia State and Decorate: Key-Value Pattern
DESCRIPTION: Shows how to use Elysia's 'state' and 'decorate' methods to assign properties to the context using a simple key-value pattern. This is suitable for setting single properties with clear readability.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/handler.md#_snippet_33

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'

class Logger {
    log(value: string) {
        console.log(value)
    }
}

new Elysia()
    .state('counter', 0)
    .decorate('logger', new Logger())
```

----------------------------------------

TITLE: Elysia Macro with Resolve
DESCRIPTION: Demonstrates using the `resolve` function within Elysia macros starting from version 1.2. It showcases the recommended object syntax for macros, allowing direct return of lifecycle hooks, and contrasts it with the older function syntax. Note that `resolve` in macros is only supported with the new object syntax.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-12.md#_snippet_2

LANGUAGE: ts
CODE:
```
import { Elysia } from 'elysia'

new Elysia()
	.macro({
		user: (enabled: true) => ({
			resolve: ({ cookie: { session } }) => ({
				user: session.value!
			})
		})
	})
	.get('/', ({ user }) => user, {
                          // ^?
		user: true
	})

```

LANGUAGE: ts
CODE:
```
// ✅ Object Macro
new Elysia()
	.macro({
		role: (role: 'admin' | 'user') => ({
			beforeHandle: ({ cookie: { session } }) => ({
				user: session.value!
			})
		})
	})

// ⚠️ Function Macro
new Elysia()
	.macro(({ onBeforeHandle }) => {
		role(role: 'admin' | 'user') {
			onBeforeHandle(({ cookie: { session } }) => ({
				user: session.value!
			})
		}
	})

```

----------------------------------------

TITLE: Wait for Deferred and Lazy Modules in Tests
DESCRIPTION: Illustrates how to use `await app.modules` within a testing environment (using Bun test) to ensure that all deferred and lazy-loaded modules have completed their registration before proceeding with assertions.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/essential/plugin.md#_snippet_26

LANGUAGE: typescript
CODE:
```
import { describe, expect, it } from 'bun:test'
import { Elysia } from 'elysia'

describe('Modules', () => {
    it('inline async', async () => {
        const app = new Elysia()
              .use(async (app) =>
                  app.get('/async', () => 'async')
              )

        await app.modules

        const res = await app
            .handle(new Request('http://localhost/async'))
            .then((r) => r.text())

        expect(res).toBe('async')
    })
})
```

----------------------------------------

TITLE: ElysiaJS: Integrate Supabase Auth Module (TypeScript)
DESCRIPTION: Demonstrates how to integrate the custom Supabase authentication module into the main ElysiaJS application. This is achieved by using the `.use()` method to apply the defined authentication routes.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/blog/elysia-supabase.md#_snippet_11

LANGUAGE: ts
CODE:
```
import { Elysia, t } from 'elysia'

import { auth } from './modules'

const app = new Elysia()
    .use(auth)
    .listen(3000)

console.log(
    `🦊 Elysia is running at ${app.server?.hostname}:${app.server?.port}`
)
```

----------------------------------------

TITLE: TypeBox Basic Primitive Type Definitions
DESCRIPTION: Illustrates common TypeBox schemas for primitive types, mirroring TypeScript's basic types. These are used within Elysia to define expected data structures for validation. Examples include String, Number, Boolean, Array, Object, Null, and Literal types.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/patterns/type.md#_snippet_1

LANGUAGE: typescript
CODE:
```
t.String()

t.Number()

t.Boolean()

t.Array(
    t.Number()
)

t.Object({
    x: t.Number()
})

t.Null()

t.Literal(42)
```

----------------------------------------

TITLE: Consuming Stream Responses with Eden Treaty AsyncGenerator
DESCRIPTION: This example illustrates how Eden Treaty handles stream responses from an Elysia server. It shows how to define a generator endpoint in Elysia and then consume the streamed data on the client-side using `for await` loop with Eden Treaty, treating the response as an `AsyncGenerator`.

SOURCE: https://github.com/elysiajs/documentation/blob/main/docs/eden/treaty/response.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import { Elysia } from 'elysia'
import { treaty } from '@elysiajs/eden'

const app = new Elysia()
	.get('/ok', function* () {
		yield 1
		yield 2
		yield 3
	})

const { data, error } = await treaty(app).ok.get()
if (error) throw error

for await (const chunk of data)
	console.log(chunk)
```
